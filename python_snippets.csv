code
"def hydrate_time(nanoseconds, tz=None):
    """""" Hydrator for `Time` and `LocalTime` values.

    :param nanoseconds:
    :param tz:
    :return: Time
    """"""
    from pytz import FixedOffset
    seconds, nanoseconds = map(int, divmod(nanoseconds, 1000000000))
    minutes, seconds = map(int, divmod(seconds, 60))
    hours, minutes = map(int, divmod(minutes, 60))
    t = Time(hours, minutes, seconds, nanoseconds)
    if tz is None:
        return t
    tz_offset_minutes, tz_offset_seconds = divmod(tz, 60)
    zone = FixedOffset(tz_offset_minutes)
    return zone.localize(t)
"
"def dehydrate_timedelta(value):
    """""" Dehydrator for `timedelta` values.

    :param value:
    :type value: timedelta
    :return:
    """"""
    months = 0
    days = value.days
    seconds = value.seconds
    nanoseconds = 1000 * value.microseconds
    return Structure(b""E"", months, days, seconds, nanoseconds)
"
"def dehydrate_time(value):
    """""" Dehydrator for `time` values.

    :param value:
    :type value: Time
    :return:
    """"""
    if isinstance(value, Time):
        nanoseconds = value.ticks
    elif isinstance(value, time):
        nanoseconds = (3600000000000 * value.hour + 60000000000 * value.minute +
                       1000000000 * value.second + 1000 * value.microsecond)
    else:
        raise TypeError(""Value must be a neo4j.time.Time or a datetime.time"")
    if value.tzinfo:
        return Structure(b""T"", nanoseconds,
                         int(value.tzinfo.utcoffset(value).total_seconds()))
    else:
        return Structure(b""t"", nanoseconds)
"
"def dehydrate_point(value):
    """""" Dehydrator for Point data.

    :param value:
    :type value: Point
    :return:
    """"""
    dim = len(value)
    if dim == 2:
        return Structure(b""X"", value.srid, *value)
    elif dim == 3:
        return Structure(b""Y"", value.srid, *value)
    else:
        raise ValueError(""Cannot dehydrate Point with %d dimensions"" % dim)
"
"    def keys(self):
        """""" Return the keys of the record.

        :return: list of key names
        """"""
        return list(self.__keys)
"
"    @classmethod
    def protocol_handlers(cls, protocol_version=None):
        """""" Return a dictionary of available Bolt protocol handlers,
        keyed by version tuple. If an explicit protocol version is
        provided, the dictionary will contain either zero or one items,
        depending on whether that version is supported. If no protocol
        version is provided, all available versions will be returned.

        :param protocol_version: tuple identifying a specific protocol
            version (e.g. (3, 5)) or None
        :return: dictionary of version tuple to handler class for all
            relevant and supported protocol versions
        :raise TypeError: if protocol version is not passed in a tuple
        """"""

        # Carry out Bolt subclass imports locally to avoid circular dependency issues.
        from ._bolt3 import Bolt3
        from ._bolt4 import (
            Bolt4x1,
            Bolt4x2,
            Bolt4x3,
            Bolt4x4,
        )
        from ._bolt5 import Bolt5x0

        handlers = {
            Bolt3.PROTOCOL_VERSION: Bolt3,
            # 4.0 unsupported because no space left in the handshake
            Bolt4x1.PROTOCOL_VERSION: Bolt4x1,
            Bolt4x2.PROTOCOL_VERSION: Bolt4x2,
            Bolt4x3.PROTOCOL_VERSION: Bolt4x3,
            Bolt4x4.PROTOCOL_VERSION: Bolt4x4,
            Bolt5x0.PROTOCOL_VERSION: Bolt5x0,
        }

        if protocol_version is None:
            return handlers

        if not isinstance(protocol_version, tuple):
            raise TypeError(""Protocol version must be specified as a tuple"")

        if protocol_version in handlers:
            return {protocol_version: handlers[protocol_version]}

        return {}
"
"def unit_of_work(metadata=None, timeout=None):
    """"""This function is a decorator for transaction functions that allows extra control over how the transaction is carried out.

    For example, a timeout may be applied::

        from neo4j import unit_of_work

        @unit_of_work(timeout=100)
        def count_people_tx(tx):
            result = tx.run(""MATCH (a:Person) RETURN count(a) AS persons"")
            record = result.single()
            return record[""persons""]

    :param metadata:
        a dictionary with metadata.
        Specified metadata will be attached to the executing transaction and visible in the output of ``dbms.listQueries`` and ``dbms.listTransactions`` procedures.
        It will also get logged to the ``query.log``.
        This functionality makes it easier to tag transactions and is equivalent to ``dbms.setTXMetaData`` procedure, see https://neo4j.com/docs/operations-manual/current/reference/procedures/ for procedure reference.
    :type metadata: dict

    :param timeout:
        the transaction timeout in seconds.
        Transactions that execute longer than the configured timeout will be terminated by the database.
        This functionality allows to limit query/transaction execution time.
        Specified timeout overrides the default timeout configured in the database using ``dbms.transaction.timeout`` setting.
        Value should not represent a negative duration.
        A zero duration will make the transaction execute indefinitely.
        None will use the default timeout configured in the database.
    :type timeout: float or :const:`None`
    """"""

    def wrapper(f):

        def wrapped(*args, **kwargs):
            return f(*args, **kwargs)

        wrapped.metadata = metadata
        wrapped.timeout = timeout
        return wrapped

    return wrapper
"
"    def index(self, key):
        """""" Return the index of the given item.

        :param key: a key
        :return: index
        :rtype: int
        """"""
        if isinstance(key, int):
            if 0 <= key < len(self.__keys):
                return key
            raise IndexError(key)
        elif isinstance(key, str):
            try:
                return self.__keys.index(key)
            except ValueError:
                raise KeyError(key)
        else:
            raise TypeError(key)
"
"    def values(self, *keys):
        """""" Return the values of the record, optionally filtering to
        include only certain values by index or key.

        :param keys: indexes or keys of the items to include; if none
                     are provided, all values will be included
        :return: list of values
        :rtype: list
        """"""
        if keys:
            d = []
            for key in keys:
                try:
                    i = self.index(key)
                except KeyError:
                    d.append(None)
                else:
                    d.append(self[i])
            return d
        return list(self)
"
"    def data(self, *keys):
        """""" Return the keys and values of this record as a dictionary,
        optionally including only certain values by index or key. Keys
        provided in the items that are not in the record will be
        inserted with a value of :const:`None`; indexes provided
        that are out of bounds will trigger an :exc:`IndexError`.

        :param keys: indexes or keys of the items to include; if none
                      are provided, all values will be included
        :return: dictionary of values, keyed by field name
        :raises: :exc:`IndexError` if an out-of-bounds index is specified
        """"""
        return RecordExporter().transform(dict(self.items(*keys)))
"
"    def pop_u16(self):
        """""" Remove the last two bytes of data, returning them as a big-endian
        16-bit unsigned integer.
        """"""
        if self.used >= 2:
            value = 0x100 * self.data[self.used - 2] + self.data[self.used - 1]
            self.used -= 2
            return value
        else:
            return -1
"
"    def discard(self, n=-1, qid=-1, dehydration_hooks=None,
                hydration_hooks=None, **handlers):
        # Just ignore n and qid, it is not supported in the Bolt 3 Protocol.
        log.debug(""[#%04X]  C: DISCARD_ALL"", self.local_port)
        self._append(b""\x2F"", (),
                     Response(self, ""discard"", hydration_hooks, **handlers),
                     dehydration_hooks=dehydration_hooks)
"
"    def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,
              db=None, imp_user=None, dehydration_hooks=None,
              hydration_hooks=None, **handlers):
        if db is not None:
            raise ConfigurationError(
                ""Database name parameter for selecting database is not ""
                ""supported in Bolt Protocol {!r}. Database name {!r}."".format(
                    self.PROTOCOL_VERSION, db
                )
            )
        if imp_user is not None:
            raise ConfigurationError(
                ""Impersonation is not supported in Bolt Protocol {!r}. ""
                ""Trying to impersonate {!r}."".format(
                    self.PROTOCOL_VERSION, imp_user
                )
            )
        extra = {}
        if mode in (READ_ACCESS, ""r""):
            extra[""mode""] = ""r""  # It will default to mode ""w"" if nothing is specified
        if bookmarks:
            try:
                extra[""bookmarks""] = list(bookmarks)
            except TypeError:
                raise TypeError(""Bookmarks must be provided within an iterable"")
        if metadata:
            try:
                extra[""tx_metadata""] = dict(metadata)
            except TypeError:
                raise TypeError(""Metadata must be coercible to a dict"")
        if timeout is not None:
            try:
                extra[""tx_timeout""] = int(1000 * float(timeout))
            except TypeError:
                raise TypeError(""Timeout must be specified as a number of seconds"")
            if extra[""tx_timeout""] < 0:
                raise ValueError(""Timeout must be a positive number or 0."")
        log.debug(""[#%04X]  C: BEGIN %r"", self.local_port, extra)
        self._append(b""\x11"", (extra,),
                     Response(self, ""begin"", hydration_hooks, **handlers),
                     dehydration_hooks=dehydration_hooks)
"
"def round_half_to_even(n):
    """"""

        >>> round_half_to_even(3)
        3
        >>> round_half_to_even(3.2)
        3
        >>> round_half_to_even(3.5)
        4
        >>> round_half_to_even(3.7)
        4
        >>> round_half_to_even(4)
        4
        >>> round_half_to_even(4.2)
        4
        >>> round_half_to_even(4.5)
        4
        >>> round_half_to_even(4.7)
        5

    :param n:
    :return:
    """"""
    ten_n = 10 * n
    if ten_n == int(ten_n) and ten_n % 10 == 5:
        up = int(n + 0.5)
        down = int(n - 0.5)
        return up if up % 2 == 0 else down
    else:
        return int(round(n))
"
"def point_type(name, fields, srid_map):
    """""" Dynamically create a Point subclass.
    """"""

    def srid(self):
        try:
            return srid_map[len(self)]
        except KeyError:
            return None

    attributes = {""srid"": property(srid)}

    for index, subclass_field in enumerate(fields):

        def accessor(self, i=index, f=subclass_field):
            try:
                return self[i]
            except IndexError:
                raise AttributeError(f)

        for field_alias in {subclass_field, ""xyz""[index]}:
            attributes[field_alias] = property(accessor)

    cls = type(name, (Point,), attributes)

    with srid_table_lock:
        for dim, srid in srid_map.items():
            srid_table[srid] = (cls, dim)

    return cls
"
"def deprecated(message):
    """""" Decorator for deprecating functions and methods.

    ::

        @deprecated(""'foo' has been deprecated in favour of 'bar'"")
        def foo(x):
            pass

    """"""
    def decorator(f):
        if asyncio.iscoroutinefunction(f):
            @wraps(f)
            async def inner(*args, **kwargs):
                deprecation_warn(message, stack_level=2)
                return await f(*args, **kwargs)

            return inner
        else:
            @wraps(f)
            def inner(*args, **kwargs):
                deprecation_warn(message, stack_level=2)
                return f(*args, **kwargs)

            return inner

    return decorator
"
"def _inline_r_setup(code: str) -> str:
    """"""
    Some behaviour of R cannot be configured via env variables, but can
    only be configured via R options once R has started. These are set here.
    """"""
    with_option = f""""""\
    options(install.packages.compile.from.source = ""never"")
    {code}
    """"""
    return with_option
"
"def xargs(
        cmd: tuple[str, ...],
        varargs: Sequence[str],
        *,
        color: bool = False,
        target_concurrency: int = 1,
        _max_length: int = _get_platform_max_length(),
        **kwargs: Any,
) -> tuple[int, bytes]:
    """"""A simplified implementation of xargs.

    color: Make a pty if on a platform that supports it
    target_concurrency: Target number of partitions to run concurrently
    """"""
    cmd_fn = cmd_output_p if color else cmd_output_b
    retcode = 0
    stdout = b''

    try:
        cmd = parse_shebang.normalize_cmd(cmd)
    except parse_shebang.ExecutableNotFoundError as e:
        return e.to_output()[:2]

    # on windows, batch files have a separate length limit than windows itself
    if (
            sys.platform == 'win32' and
            cmd[0].lower().endswith(('.bat', '.cmd'))
    ):  # pragma: win32 cover
        # this is implementation details but the command gets translated into
        # full/path/to/cmd.exe /c *cmd
        cmd_exe = parse_shebang.find_executable('cmd.exe')
        # 1024 is additionally subtracted to give headroom for further
        # expansion inside the batch file
        _max_length = 8192 - len(cmd_exe) - len(' /c ') - 1024

    partitions = partition(cmd, varargs, target_concurrency, _max_length)

    def run_cmd_partition(
            run_cmd: tuple[str, ...],
    ) -> tuple[int, bytes, bytes | None]:
        return cmd_fn(
            *run_cmd, retcode=None, stderr=subprocess.STDOUT, **kwargs,
        )

    threads = min(len(partitions), target_concurrency)
    with _thread_mapper(threads) as thread_map:
        results = thread_map(run_cmd_partition, partitions)

        for proc_retcode, proc_out, _ in results:
            retcode = max(retcode, proc_retcode)
            stdout += proc_out

    return retcode, stdout
"
"def _shuffled(seq: Sequence[str]) -> list[str]:
    """"""Deterministically shuffle""""""
    fixed_random = random.Random()
    fixed_random.seed(FIXED_RANDOM_SEED, version=1)

    seq = list(seq)
    fixed_random.shuffle(seq)
    return seq
"
"def parse_version(s: str) -> tuple[int, ...]:
    """"""poor man's version comparison""""""
    return tuple(int(p) for p in s.split('.'))
"
"def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:
    """"""Fixes for the following issues on windows
    - https://bugs.python.org/issue8557
    - windows does not parse shebangs

    This function also makes deep-path shebangs work just fine
    """"""
    # Use PATH to determine the executable
    exe = normexe(cmd[0])

    # Figure out the shebang from the resulting command
    cmd = parse_filename(exe) + (exe,) + cmd[1:]

    # This could have given us back another bare executable
    exe = normexe(cmd[0])

    return (exe,) + cmd[1:]
"
"def cached(cache, key=hashkey, lock=None):
    """"""Decorator to wrap a function with a memoizing callable that saves
    results in a cache.

    """"""
    def decorator(func):
        if cache is None:
            def wrapper(*args, **kwargs):
                return func(*args, **kwargs)
        elif lock is None:
            def wrapper(*args, **kwargs):
                k = key(*args, **kwargs)
                try:
                    return cache[k]
                except KeyError:
                    pass  # key not found
                v = func(*args, **kwargs)
                try:
                    cache[k] = v
                except ValueError:
                    pass  # value too large
                return v
        else:
            def wrapper(*args, **kwargs):
                k = key(*args, **kwargs)
                try:
                    with lock:
                        return cache[k]
                except KeyError:
                    pass  # key not found
                v = func(*args, **kwargs)
                # in case of a race, prefer the item already in the cache
                try:
                    with lock:
                        return cache.setdefault(k, v)
                except ValueError:
                    return v  # value too large
        return functools.update_wrapper(wrapper, func)
    return decorator
"
"def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):
    """"""Decorator to wrap a function with a memoizing callable that saves
    up to `maxsize` results based on a Least Recently Used (LRU)
    algorithm with a per-item time-to-live (TTL) value.
    """"""
    if maxsize is None:
        return _cache(_UnboundTTLCache(ttl, timer), typed)
    elif callable(maxsize):
        return _cache(TTLCache(128, ttl, timer), typed)(maxsize)
    else:
        return _cache(TTLCache(maxsize, ttl, timer), typed)
"
"def mru_cache(maxsize=128, typed=False):
    """"""Decorator to wrap a function with a memoizing callable that saves
    up to `maxsize` results based on a Most Recently Used (MRU)
    algorithm.
    """"""
    if maxsize is None:
        return _cache(_UnboundCache(), typed)
    elif callable(maxsize):
        return _cache(MRUCache(128), typed)(maxsize)
    else:
        return _cache(MRUCache(maxsize), typed)
"
"def lru_cache(maxsize=128, typed=False):
    """"""Decorator to wrap a function with a memoizing callable that saves
    up to `maxsize` results based on a Least Recently Used (LRU)
    algorithm.

    """"""
    if maxsize is None:
        return _cache(_UnboundCache(), typed)
    elif callable(maxsize):
        return _cache(LRUCache(128), typed)(maxsize)
    else:
        return _cache(LRUCache(maxsize), typed)
"
"def lfu_cache(maxsize=128, typed=False):
    """"""Decorator to wrap a function with a memoizing callable that saves
    up to `maxsize` results based on a Least Frequently Used (LFU)
    algorithm.

    """"""
    if maxsize is None:
        return _cache(_UnboundCache(), typed)
    elif callable(maxsize):
        return _cache(LFUCache(128), typed)(maxsize)
    else:
        return _cache(LFUCache(maxsize), typed)
"
"    def popitem(self):
        """"""Remove and return the `(key, value)` pair first inserted.""""""
        try:
            key = next(iter(self.__order))
        except StopIteration:
            raise KeyError('%s is empty' % type(self).__name__) from None
        else:
            return (key, self.pop(key))
"
"    def setdefault(self, key, default=None):
        if key in self:
            value = self[key]
        else:
            self[key] = value = default
        return value
"
"    def get(self, key, default=None):
        if key in self:
            return self[key]
        else:
            return default
"
"def cachedmethod(cache, key=hashkey, lock=None):
    """"""Decorator to wrap a class or instance method with a memoizing
    callable that saves results in a cache.

    """"""
    def decorator(method):
        if lock is None:
            def wrapper(self, *args, **kwargs):
                c = cache(self)
                if c is None:
                    return method(self, *args, **kwargs)
                k = key(*args, **kwargs)
                try:
                    return c[k]
                except KeyError:
                    pass  # key not found
                v = method(self, *args, **kwargs)
                try:
                    c[k] = v
                except ValueError:
                    pass  # value too large
                return v
        else:
            def wrapper(self, *args, **kwargs):
                c = cache(self)
                if c is None:
                    return method(self, *args, **kwargs)
                k = key(*args, **kwargs)
                try:
                    with lock(self):
                        return c[k]
                except KeyError:
                    pass  # key not found
                v = method(self, *args, **kwargs)
                # in case of a race, prefer the item already in the cache
                try:
                    with lock(self):
                        return c.setdefault(k, v)
                except ValueError:
                    return v  # value too large
        return functools.update_wrapper(wrapper, method)
    return decorator
"
"    @classmethod
    def extostr(cls, e, max_level=30, max_path_level=5):
        """"""
        Format an exception.
        :param e: Any exception instance.
        :type e: Exception
        :param max_level: Maximum call stack level (default 30)
        :type max_level: int
        :param max_path_level: Maximum path level (default 5)
        :type max_path_level: int
        :return The exception readable string
        :rtype str
        """"""

        # Go
        list_frame = None
        try:
            out_buffer = """"

            # Class type
            out_buffer += ""e.cls:[{0}]"".format(e.__class__.__name__)

            # To string
            try:
                ex_buf = str(e)
            except UnicodeEncodeError:
                ex_buf = repr(str(e))
            except Exception as e:
                logger.warning(""Exception, e=%s"", e)
                raise
            out_buffer += "", e.bytes:[{0}]"".format(ex_buf)

            # Traceback
            si = sys.exc_info()

            # Raw frame
            # tuple : (file, lineno, method, code)
            raw_frame = traceback.extract_tb(si[2])
            raw_frame.reverse()

            # Go to last tb_next
            last_tb_next = None
            cur_tb = si[2]
            while cur_tb:
                last_tb_next = cur_tb
                cur_tb = cur_tb.tb_next

            # Skip frame up to current raw frame count
            list_frame = list()
            cur_count = -1
            skip_count = len(raw_frame)
            if last_tb_next:
                cur_frame = last_tb_next.tb_frame
            else:
                cur_frame = None
            while cur_frame:
                cur_count += 1
                if cur_count < skip_count:
                    cur_frame = cur_frame.f_back
                else:
                    # Need : tuple : (file, lineno, method, code)
                    raw_frame.append((cur_frame.f_code.co_filename, cur_frame.f_lineno, cur_frame.f_code.co_name, """"))
                    cur_frame = cur_frame.f_back

            # Build it
            cur_idx = 0
            out_buffer += "", e.cs=[""
            for tu in raw_frame:
                line = tu[1]
                cur_file = tu[0]
                method = tu[2]

                # Handle max path level
                ar_token = cur_file.rsplit(os.sep, max_path_level)
                if len(ar_token) > max_path_level:
                    # Remove head
                    ar_token.pop(0)
                    # Join
                    cur_file = ""..."" + os.sep.join(ar_token)

                # Format
                out_buffer += ""in:{0}#{1}@{2} "".format(method, cur_file, line)

                # Loop
                cur_idx += 1
                if cur_idx >= max_level:
                    out_buffer += ""...""
                    break

            # Close
            out_buffer += ""]""

            # Ok
            return out_buffer
        finally:
            if list_frame:
                del list_frame
"
"    @staticmethod
    def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):
        """"""
        Write to the specified filename, the provided binary buffer
        Create the file if required.
        :param file_name:  File name.
        :type file_name: str
        :param text_buffer: Text buffer to write.
        :type text_buffer: str
        :param encoding: The encoding to use.
        :type encoding: str
        :param overwrite: If true, file is overwritten.
        :type overwrite: bool
        :return: The number of bytes written or lt 0 if error.
        :rtype int
        """"""

        # Go
        rd = None
        try:
            # Open (text : open return a io.BufferedReader)
            if not overwrite:
                rd = codecs.open(file_name, ""a+"", encoding, ""strict"", -1)
            else:
                rd = codecs.open(file_name, ""w"", encoding, ""strict"", -1)

            # Read everything
            # CAUTION : 2.7 return None :(
            return rd.write(text_buffer)
        except IOError as e:
            # Exception...
            logger.warning(""append_text_to_file : IOError, ex=%s"", SolBase.extostr(e))
            return -1
        except Exception as e:
            logger.warning(""append_text_to_file : Exception, ex=%s"", SolBase.extostr(e))
            return -1
        finally:
            # Close if not None...
            if rd:
                rd.close()
"
"    @staticmethod
    def file_to_textbuffer(file_name, encoding):
        """"""
        Load a file toward a text buffer (UTF-8), using the specify encoding while reading.
        CAUTION : This will read the whole file IN MEMORY.
        :param file_name: File name.
        :type file_name: str
        :param encoding: Encoding to use.
        :type encoding: str
        :return: A text buffer or None in case of error.
        :rtype str
        """"""

        # Check
        if not FileUtility.is_file_exist(file_name):
            logger.warning(""file_to_textbuffer : file_name not exist, file_name=%s"", file_name)
            return None

        # Go
        rd = None
        try:
            # Open (text : open return a io.BufferedReader)
            rd = codecs.open(file_name, ""r"", encoding, ""strict"", -1)

            # Read everything
            return rd.read()
        except IOError as e:
            # Exception...
            logger.warning(""file_to_binary : IOError, ex=%s"", SolBase.extostr(e))
            return None
        except Exception as e:
            logger.warning(""file_to_binary : Exception, ex=%s"", SolBase.extostr(e))
            return None
        finally:
            # Close if not None...
            if rd:
                rd.close()
"
"    @staticmethod
    def is_file_exist(file_name):
        """"""
        Check if file name exist.
        :param file_name: File name.
        :type file_name: str
        :return: Return true (exist), false (do not exist, or invalid file name)
        :rtype bool
        """"""

        # Check
        if file_name is None:
            logger.warning(""is_file_exist : file_name is None"")
            return False
        elif not isinstance(file_name, str):
            logger.warning(""is_file_exist : file_name not a text_type, className=%s"", SolBase.get_classname(file_name))
            return False

        # Go
        return os.path.isfile(file_name)
"
"    @classmethod
    def _reset_logging(cls):
        """"""
        Reset
        """"""

        # Found no way to fully reset the logging stuff while running
        # We reset root and all loggers to INFO, and kick handlers

        # Initialize
        root = logging.getLogger()
        root.setLevel(logging.getLevelName(""INFO""))
        for h in root.handlers:
            # noinspection PyBroadException
            try:
                h.close()
            except:
                pass
        root.handlers = []

        # Browse all loggers and set
        for name in logging.root.manager.loggerDict:
            cur_logger = logging.getLogger(name)
            cur_logger.setLevel(logging.getLevelName(""INFO""))
            for h in cur_logger.handlers:
                # noinspection PyBroadException
                try:
                    h.close()
                except:
                    pass
            cur_logger.handlers = []
"
"    def _getTargetClass(self):
        from zope.interface.declarations import getObjectSpecification
        return getObjectSpecification
"
"def _legacy_mergeOrderings(orderings):
    """"""Merge multiple orderings so that within-ordering order is preserved

    Orderings are constrained in such a way that if an object appears
    in two or more orderings, then the suffix that begins with the
    object must be in both orderings.

    For example:

    >>> _mergeOrderings([
    ... ['x', 'y', 'z'],
    ... ['q', 'z'],
    ... [1, 3, 5],
    ... ['z']
    ... ])
    ['x', 'y', 'q', 1, 3, 5, 'z']

    """"""

    seen = set()
    result = []
    for ordering in reversed(orderings):
        for o in reversed(ordering):
            if o not in seen:
                seen.add(o)
                result.insert(0, o)

    return result
"
"def directlyProvidedBy(object): # pylint:disable=redefined-builtin
    """"""Return the interfaces directly provided by the given object

    The value returned is an `~zope.interface.interfaces.IDeclaration`.
    """"""
    provides = getattr(object, ""__provides__"", None)
    if (
            provides is None # no spec
            # We might have gotten the implements spec, as an
            # optimization. If so, it's like having only one base, that we
            # lop off to exclude class-supplied declarations:
            or isinstance(provides, Implements)
    ):
        return _empty

    # Strip off the class part of the spec:
    return Declaration(provides.__bases__[:-1])
"
"def minimalBases(classes):
    """"""Reduce a list of base classes to its ordered minimum equivalent""""""

    if not __python3: # pragma: no cover
        classes = [c for c in classes if c is not ClassType]
    candidates = []

    for m in classes:
        for n in classes:
            if issubclass(n,m) and m is not n:
                break
        else:
            # m has no subclasses in 'classes'
            if m in candidates:
                candidates.remove(m)    # ensure that we're later in the list
            candidates.append(m)

    return candidates
"
"    def namesAndDescriptions(self, all=False): # pylint:disable=redefined-builtin
        """"""Return attribute names and descriptions defined by interface.""""""
        if not all:
            return self.__attrs.items()

        r = {}
        for base in self.__bases__[::-1]:
            r.update(dict(base.namesAndDescriptions(all)))

        r.update(self.__attrs)

        return r.items()
"
"    def names(self, all=False): # pylint:disable=redefined-builtin
        """"""Return the attribute names defined by the interface.""""""
        if not all:
            return self.__attrs.keys()

        r = self.__attrs.copy()

        for base in self.__bases__:
            r.update(dict.fromkeys(base.names(all)))

        return r.keys()
"
"def _normalizeargs(sequence, output=None):
    """"""Normalize declaration arguments

    Normalization arguments might contain Declarions, tuples, or single
    interfaces.

    Anything but individial interfaces or implements specs will be expanded.
    """"""
    if output is None:
        output = []

    cls = sequence.__class__
    if InterfaceClass in cls.__mro__ or Implements in cls.__mro__:
        output.append(sequence)
    else:
        for v in sequence:
            _normalizeargs(v, output)

    return output
"
"def _c_optimizations_available():
    """"""
    Return the C optimization module, if available, otherwise
    a false value.

    If the optimizations are required but not available, this
    raises the ImportError.

    This does not say whether they should be used or not.
    """"""
    catch = () if _c_optimizations_required() else (ImportError,)
    try:
        from zope.interface import _zope_interface_coptimizations as c_opt
        return c_opt
    except catch: # pragma: no cover (only Jython doesn't build extensions)
        return False
"
"def _should_attempt_c_optimizations():
    """"""
    Return a true value if we should attempt to use the C optimizations.

    This takes into account whether we're on PyPy and the value of the
    ``PURE_PYTHON`` environment variable, as defined in `_use_c_impl`.
    """"""
    is_pypy = hasattr(sys, 'pypy_version_info')

    if _c_optimizations_required():
        return True
    if is_pypy:
        return False
    return not _c_optimizations_ignored()
"
"def _c_optimizations_ignored():
    """"""
    The opposite of `_c_optimizations_required`.
    """"""
    pure_env = os.environ.get('PURE_PYTHON')
    return pure_env is not None and pure_env != ""0""
"
"def _c_optimizations_required():
    """"""
    Return a true value if the C optimizations are required.

    This uses the ``PURE_PYTHON`` variable as documented in `_use_c_impl`.
    """"""
    pure_env = os.environ.get('PURE_PYTHON')
    require_c = pure_env == ""0""
    return require_c
"
"    def reset(self):
        """"""Reset the histogram.

        Current context is reset to an empty dict.
        Bins are reinitialized with the *initial_value*
        or with *make_bins()* (depending on the initialization).
        """"""
        if self._make_bins is not None:
            self.bins = self._make_bins()
        elif self._initial_bins is not None:
            self.bins = copy.deepcopy(self._initial_bins)
        else:
            self.bins = hf.init_bins(self.edges, self._initial_value)

        self._cur_context = {}
"
"    def to_csv(self, separator="","", header=None):
        """""".. deprecated:: 0.5 in Lena 0.5 to_csv is not used.
              Iterables are converted to tables.

        Convert graph's points to CSV.

        *separator* delimits values, the default is comma.

        *header*, if not ``None``, is the first string of the output
        (new line is added automatically).

        Since a graph can be multidimensional,
        for each point first its coordinate is converted to string
        (separated by *separator*), then each part of its value.

        To convert :class:`Graph` to CSV inside a Lena sequence,
        use :class:`lena.output.ToCSV`.
        """"""
        if self._sort:
            self._update()

        def unpack_pt(pt):
            coord = pt[0]
            value = pt[1]
            if isinstance(coord, tuple):
                unpacked = list(coord)
            else:
                unpacked = [coord]
            if isinstance(value, tuple):
                unpacked += list(value)
            else:
                unpacked.append(value)
            return unpacked

        def pt_to_str(pt, separ):
            return separ.join([str(val) for val in unpack_pt(pt)])

        if header is not None:
            # if one needs an empty header line, they may provide """"
            lines = header + ""\n""
        else:
            lines = """"
        lines += ""\n"".join([pt_to_str(pt, separator) for pt in self.points])

        return lines
"
"    def _get_err_indices(self, coord_name):
        """"""Get error indices corresponding to a coordinate.""""""
        err_indices = []
        dim = self.dim
        for ind, err in enumerate(self._parsed_error_names):
            if err[1] == coord_name:
                err_indices.append(ind+dim)
        return err_indices
"
"    def _update_context(self, context):
        """"""Update *context* with the properties of this graph.

        *context.error* is appended with indices of errors.
        Example subcontext for a graph with fields ""E,t,error_E_low"":
        {""error"": {""x_low"": {""index"": 2}}}.
        Note that error names are called ""x"", ""y"" and ""z""
        (this corresponds to first three coordinates,
        if they are present), which allows to simplify plotting.
        Existing values are not removed
        from *context.value* and its subcontexts.

        Called on ""destruction"" of the graph (for example,
        in :class:`.ToCSV`). By destruction we mean conversion
        to another structure (like text) in the flow.
        The graph object is not really destroyed in this process.
        """"""
        # this method is private, because we encourage users to yield
        # graphs into the flow and process them with ToCSV element
        # (not manually).

        if not self._parsed_error_names:
            # no error fields present
            return

        dim = self.dim

        xyz_coord_names = self._coord_names[:3]
        for name, coord_name in zip([""x"", ""y"", ""z""], xyz_coord_names):
            for err in self._parsed_error_names:
                if err[1] == coord_name:
                    error_ind = err[3]
                    if err[2]:
                        # add error suffix
                        error_name = name + ""_"" + err[2]
                    else:
                        error_name = name
                    lena.context.update_recursively(
                        context,
                        ""error.{}.index"".format(error_name),
                        # error can correspond both to variable and
                        # value, so we put it outside value.
                        # ""value.error.{}.index"".format(error_name),
                        error_ind
                    )
"
"def integral(bins, edges):
    """"""Compute integral (scale for a histogram).

    *bins* contain values, and *edges* form the mesh
    for the integration.
    Their format is defined in :class:`.histogram` description.
    """"""
    total = 0
    for ind, bin_content in iter_bins(bins):
        bin_lengths = [
            edges[coord][i+1] - edges[coord][i]
            for coord, i in enumerate(ind)
        ]
        # product
        vol = _reduce(operator.mul, bin_lengths, 1)
        cell_integral = vol * bin_content
        total += cell_integral
    return total
"
"def is_fill_request_seq(seq):
    """"""Test whether *seq* can be converted to a FillRequestSeq.

    True only if it is a FillRequest element
    or contains at least one such,
    and it is not a Source sequence.
    """"""
    if is_source(seq):
        return False
    is_fcseq = False
    if hasattr(seq, ""__iter__""):
        is_fcseq = any(map(is_fill_request_el, seq))
    if is_fill_request_el(seq):
        is_fcseq = True
    return is_fcseq
"
"def is_fill_request_el(obj):
    """"""Object contains executable methods 'fill' and 'request'.""""""
    return hasattr(obj, ""fill"") and hasattr(obj, ""request"") \
            and callable(obj.fill) and callable(obj.request)
"
"def is_run_el(obj):
    """"""Object contains executable method 'run'.""""""
    return hasattr(obj, ""run"") and callable(obj.run)
"
"def is_fill_compute_el(obj):
    """"""Object contains executable methods 'fill' and 'compute'.""""""
    return (hasattr(obj, ""fill"")
            and hasattr(obj, ""compute"")
            and callable(obj.fill)
            and callable(obj.compute))
"
"def difference(d1, d2, level=-1):
    """"""Return a dictionary with items from *d1* not contained in *d2*.

    *level* sets the maximum depth of recursion. For infinite recursion,
    set that to -1. For level 1,
    if a key is present both in *d1* and *d2* but has different values,
    it is included into the difference.
    See :func:`intersection` for more details.

    *d1* and *d2* remain unchanged. However, *d1* or some of its
    subdictionaries may be returned directly.
    Make a deep copy of the result when appropriate.

    .. versionadded:: 0.5
       add keyword argument *level*.
    """"""
    # can become not dicts during the recursion
    if not isinstance(d1, dict) or not isinstance(d2, dict):
        return d1

    if d1 == d2:
        return {}
    elif level == 0:
        return d1

    # some keys differ
    result = {}
    for key in d1:
        if key not in d2:
            result[key] = d1[key]
        elif d1[key] != d2[key]:
            res = difference(d1[key], d2[key], level-1)
            # if d2[key] contains all d1[key] elements,
            # the difference will be empty
            if res:
                result[key] = res
    return result
"
"    def fill(self, coord, weight=1):
        """"""Fill histogram at *coord* with the given *weight*.

        Coordinates outside the histogram edges are ignored.
        """"""
        indices = hf.get_bin_on_value(coord, self.edges)
        subarr = self.bins
        for ind in indices[:-1]:
            # underflow
            if ind < 0:
                return
            try:
                subarr = subarr[ind]
            # overflow
            except IndexError:
                return
        ind = indices[-1]
        # underflow
        if ind < 0:
            return

        # fill
        try:
            subarr[ind] += weight
        except IndexError:
            return
"
"def _validate_labels(labels):
    """"""Check that keys and values in the given labels match against their corresponding
    regular expressions.

    Args:
        labels (dict): the different labels to validate.

    Raises:
        ValidationError: if any of the keys and labels does not match their respective
            regular expression. The error contains as message the list of all errors
            which occurred in the labels. Each element of the list is a dictionary with
            one key-value pair:
            - key: the label key or label value for which an error occurred as string.
            - value: the error message.

            .. code:: python

                # Example:
                labels = {
                    ""key1"": ""valid"",
                    ""key2"": [""invalid""],
                    ""$$"": ""invalid"",
                    True: True,
                }
                try:
                    _validate_labels(labels)
                except ValidationError as err:
                    assert err.messages == [
                        {""['invalid']"": 'expected string or bytes-like object'},
                        {'$$': ""Label key '$$' does not match the regex [...]""},
                        {'True': 'expected string or bytes-like object'},
                        {'True': 'expected string or bytes-like object'},
                    ]
    """"""
    errors = []
    for key, value in labels.items():
        try:
            validate_key(key)
        except (ValidationError, TypeError) as err:
            errors.append({str(key): str(err)})

        try:
            validate_value(value)
        except (ValidationError, TypeError) as err:
            errors.append({str(value): str(err)})

    if errors:
        raise ValidationError(list(errors))
"
"def _get_resource_name_regex():
    """"""Build or return the regular expressions that are used to validate
    the name of the Krake resources.

    Returns:
        (re.Pattern): the compiled regular expressions, to validate
        the resource name.
    """"""
    global _resource_name_regex, _resource_name_pattern

    # Build the patterns only if not already built
    if _resource_name_regex:
        return _resource_name_regex

    # First and last characters must be alphanumeric. The rest of the string must be
    # alphanumeric, ""-"", ""_"" or ""."" and without whitespace as well as have a
    # max length of 255 and a min length of 1
    max_name_size = 253  # reduced by 2 for the regex
    min_name_size = 0  # reduced by 1 for the regex
    base_alphanumeric_pattern = ""\\w|(\\w[\\w\\-_.:]{{{min_length},{length}}}\\w)""

    resource_name_pattern = base_alphanumeric_pattern.format(
        min_length=min_name_size, length=max_name_size
    )

    _resource_name_pattern = resource_name_pattern
    _resource_name_regex = re.compile(_resource_name_pattern, re.ASCII)
    return _resource_name_regex
"
"def validate_value(value):
    """"""Validate the given value against the corresponding regular expression.

    Args:
        value: the string to validate

    Raises:
        ValidationError: if the given value is not conform to the regular expression.
    """"""
    _, value_regex = _get_labels_regex()
    if not value_regex.fullmatch(value):
        raise ValidationError(
            f""Label value {value!r} does not match""
            f"" the regex {_label_value_pattern!r}.""
        )
"
"def validate_key(key):
    """"""Validate the given key against the corresponding regular expression.

    Args:
        key: the string to validate

    Raises:
        ValidationError: if the given key is not conform to the regular expression.
    """"""
    key_regex, _ = _get_labels_regex()
    if not key_regex.fullmatch(key):
        raise ValidationError(
            f""Label key {key!r} does not match the regex {_label_key_pattern!r}.""
        )
"
"def generate_default_observer_schema_dict(manifest_dict, first_level=False):
    """"""Together with :func:``generate_default_observer_schema_list``, this function is
    called recursively to generate part of a default ``observer_schema`` from part of a
    Kubernetes resource, defined respectively by ``manifest_dict`` or ``manifest_list``.

    Args:
        manifest_dict (dict): Partial Kubernetes resources
        first_level (bool, optional): If True, indicates that the dictionary represents
            the whole observer schema of a Kubernetes resource

    Returns:
        dict: Generated partial observer_schema

    This function creates a new dictionary from ``manifest_dict`` and replaces all
    non-list and non-dict values by ``None``.

    In case of ``first_level`` dictionary (i.e. complete ``observer_schema`` for a
    resource), the values of the identifying fields are copied from the manifest file.

    """"""
    observer_schema_dict = {}

    for key, value in manifest_dict.items():

        if isinstance(value, dict):
            observer_schema_dict[key] = generate_default_observer_schema_dict(value)

        elif isinstance(value, list):
            observer_schema_dict[key] = generate_default_observer_schema_list(value)

        else:
            observer_schema_dict[key] = None

    if first_level:
        observer_schema_dict[""apiVersion""] = manifest_dict[""apiVersion""]
        observer_schema_dict[""kind""] = manifest_dict[""kind""]
        observer_schema_dict[""metadata""][""name""] = manifest_dict[""metadata""][""name""]

        if (
            ""spec"" in manifest_dict
            and ""type"" in manifest_dict[""spec""]
            and manifest_dict[""spec""][""type""] == ""LoadBalancer""
        ):
            observer_schema_dict[""status""] = {""load_balancer"": {""ingress"": None}}

    return observer_schema_dict
"
"def update_last_applied_manifest_list_from_resp(
    last_applied_manifest, observer_schema, response
):
    """"""Together with :func:``update_last_applied_manifest_dict_from_resp``, this
    function is called recursively to update a partial ``last_applied_manifest``
    from a partial Kubernetes response

    Args:
        last_applied_manifest (list): partial ``last_applied_manifest`` being
            updated
        observer_schema (list): partial ``observer_schema``
        response (list): partial response from the Kubernetes API.

    This function go through all observed fields, and initialized their value in
    last_applied_manifest if they are not yet present

    """"""
    # Looping over the observed resource, except the last element which is the
    # special control dictionary
    for idx, val in enumerate(observer_schema[:-1]):

        if idx >= len(response):
            # Element is observed but not present in k8s response, so following
            # elements will also not exist.
            #
            # This doesn't raise an Exception as observing the element of a list
            # doesn't ensure its presence. The list length is controlled by the
            # special control dictionary
            return

        if isinstance(val, dict):
            if idx >= len(last_applied_manifest):
                # The dict is observed, but not present in last_applied_manifest
                last_applied_manifest.append({})

            update_last_applied_manifest_dict_from_resp(
                last_applied_manifest[idx], observer_schema[idx], response[idx]
            )

        elif isinstance(response[idx], list):
            if idx >= len(last_applied_manifest):
                # The list is observed, but not present in last_applied_manifest
                last_applied_manifest.append([])

            update_last_applied_manifest_list_from_resp(
                last_applied_manifest[idx], observer_schema[idx], response[idx]
            )

        elif idx >= len(last_applied_manifest):
            # Element is not yet present in last_applied_manifest. Adding it.
            last_applied_manifest.append(response[idx])
"
"def update_last_applied_manifest_dict_from_resp(
    last_applied_manifest, observer_schema, response
):
    """"""Together with :func:``update_last_applied_manifest_list_from_resp``, this
    function is called recursively to update a partial ``last_applied_manifest``
    from a partial Kubernetes response

    Args:
        last_applied_manifest (dict): partial ``last_applied_manifest`` being
            updated
        observer_schema (dict): partial ``observer_schema``
        response (dict): partial response from the Kubernetes API.

    Raises:
        KeyError: If the observed field is not present in the Kubernetes response

    This function go through all observed fields, and initialized their value in
    last_applied_manifest if they are not yet present

    """"""
    for key, value in observer_schema.items():

        # Keys in the response are in camelCase
        camel_key = camel_to_snake_case(key)

        if camel_key not in response:
            # An observed key should always be present in the k8s response
            raise KeyError(
                f""Observed key {camel_key} is not present in response {response}""
            )

        if isinstance(value, dict):
            if key not in last_applied_manifest:
                # The dictionary is observed, but not present in
                # last_applied_manifest
                last_applied_manifest[key] = {}

            update_last_applied_manifest_dict_from_resp(
                last_applied_manifest[key], observer_schema[key], response[camel_key]
            )

        elif isinstance(value, list):
            if key not in last_applied_manifest:
                # The list is observed, but not present in last_applied_manifest
                last_applied_manifest[key] = []

            update_last_applied_manifest_list_from_resp(
                last_applied_manifest[key], observer_schema[key], response[camel_key]
            )

        elif key not in last_applied_manifest:
            # If key not present in last_applied_manifest, and value is neither a
            # dict nor a list, simply add it.
            last_applied_manifest[key] = response[camel_key]
"
"def generate_default_observer_schema(app):
    """"""Generate the default observer schema for each Kubernetes resource present in
    ``spec.manifest`` for which a custom observer schema hasn't been specified.

    Args:
        app (krake.data.kubernetes.Application): The application for which to generate a
            default observer schema
    """"""

    app.status.mangled_observer_schema = deepcopy(app.spec.observer_schema)

    for resource_manifest in app.spec.manifest:
        try:
            get_kubernetes_resource_idx(
                app.status.mangled_observer_schema, resource_manifest
            )

        except IndexError:
            # Only create a default observer schema, if a custom observer schema hasn't
            # been set by the user.
            app.status.mangled_observer_schema.append(
                generate_default_observer_schema_dict(
                    resource_manifest,
                    first_level=True,
                )
            )
"
"	def format(
		self,
		sql: AnyStr,
		params: Union[Dict[Union[str, int], Any], Sequence[Any]],
	) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:
		""""""
		Convert the SQL query to use the out-style parameters instead of
		the in-style parameters.

		*sql* (:class:`str` or :class:`bytes`) is the SQL query.

		*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)
		contains the set of in-style parameters. It maps each parameter
		(:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`
		is a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.
		If :attr:`.SQLParams.in_style` is an ordinal parameter style, then
		*params* must be a :class:`~collections.abc.Sequence`.

		Returns a :class:`tuple` containing:

		-	The formatted SQL query (:class:`str` or :class:`bytes`).

		-	The set of converted out-style parameters (:class:`dict` or
			:class:`list`).
		""""""
		# Normalize query encoding to simplify processing.
		if isinstance(sql, str):
			use_sql = sql
			string_type = str
		elif isinstance(sql, bytes):
			use_sql = sql.decode(_BYTES_ENCODING)
			string_type = bytes
		else:
			raise TypeError(""sql:{!r} is not a unicode or byte string."".format(sql))

		# Replace in-style with out-style parameters.
		use_sql, out_params = self._converter.convert(use_sql, params)

		# Make sure the query is returned as the proper string type.
		if string_type is bytes:
			out_sql = use_sql.encode(_BYTES_ENCODING)
		else:
			out_sql = use_sql

		# Return converted SQL and out-parameters.
		return out_sql, out_params
"
"	def formatmany(
		self,
		sql: AnyStr,
		many_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],
	) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:
		""""""
		Convert the SQL query to use the out-style parameters instead of the
		in-style parameters.

		*sql* (:class:`str` or :class:`bytes`) is the SQL query.

		*many_params* (:class:`~collections.abc.Iterable`) contains each set
		of in-style parameters (*params*).

		-	*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)
			contains the set of in-style parameters. It maps each parameter
			(:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`
			is a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.
			If :attr:`.SQLParams.in_style` is an ordinal parameter style. then
			*params* must be a :class:`~collections.abc.Sequence`.

		Returns a :class:`tuple` containing:

		-	The formatted SQL query (:class:`str` or :class:`bytes`).

		-	A :class:`list` containing each set of converted out-style
			parameters (:class:`dict` or :class:`list`).
		""""""
		# Normalize query encoding to simplify processing.
		if isinstance(sql, str):
			use_sql = sql
			string_type = str
		elif isinstance(sql, bytes):
			use_sql = sql.decode(_BYTES_ENCODING)
			string_type = bytes
		else:
			raise TypeError(""sql:{!r} is not a unicode or byte string."".format(sql))

		if not _is_iterable(many_params):
			raise TypeError(""many_params:{!r} is not iterable."".format(many_params))

		# Replace in-style with out-style parameters.
		use_sql, many_out_params = self._converter.convert_many(use_sql, many_params)

		# Make sure the query is returned as the proper string type.
		if string_type is bytes:
			out_sql = use_sql.encode(_BYTES_ENCODING)
		else:
			out_sql = use_sql

		# Return converted SQL and out-parameters.
		return out_sql, many_out_params
"
"    def validate(self, path):
        """"""Validate OCFL object at path or pyfs root.

        Returns True if valid (warnings permitted), False otherwise.
        """"""
        self.initialize()
        try:
            if isinstance(path, str):
                self.obj_fs = open_fs(path)
            else:
                self.obj_fs = path
                path = self.obj_fs.desc('')
        except fs.errors.CreateFailed:
            self.log.error('E003e', path=path)
            return False
        # Object declaration, set spec version number. If there are multiple declarations,
        # look for the lastest object version then report any others as errors
        namastes = find_namastes(0, pyfs=self.obj_fs)
        if len(namastes) == 0:
            self.log.error('E003a', assumed_version=self.spec_version)
        else:
            spec_version = None
            for namaste in namastes:
                # Extract and check spec version number
                this_file_version = None
                for version in ('1.1', '1.0'):
                    if namaste.filename == '0=ocfl_object_' + version:
                        this_file_version = version
                        break
                if this_file_version is None:
                    self.log.error('E006', filename=namaste.filename)
                elif spec_version is None or this_file_version > spec_version:
                    spec_version = this_file_version
                    if not namaste.content_ok(pyfs=self.obj_fs):
                        self.log.error('E007', filename=namaste.filename)
            if spec_version is None:
                self.log.error('E003c', assumed_version=self.spec_version)
            else:
                self.spec_version = spec_version
                if len(namastes) > 1:
                    self.log.error('E003b', files=len(namastes), using_version=self.spec_version)
        # Object root inventory file
        inv_file = 'inventory.json'
        if not self.obj_fs.exists(inv_file):
            self.log.error('E063')
            return False
        try:
            inventory, inv_validator = self.validate_inventory(inv_file)
            inventory_is_valid = self.log.num_errors == 0
            self.root_inv_validator = inv_validator
            all_versions = inv_validator.all_versions
            self.id = inv_validator.id
            self.content_directory = inv_validator.content_directory
            self.digest_algorithm = inv_validator.digest_algorithm
            self.validate_inventory_digest(inv_file, self.digest_algorithm)
            # Object root
            self.validate_object_root(all_versions, already_checked=[namaste.filename for namaste in namastes])
            # Version inventory files
            (prior_manifest_digests, prior_fixity_digests) = self.validate_version_inventories(all_versions)
            if inventory_is_valid:
                # Object content
                self.validate_content(inventory, all_versions, prior_manifest_digests, prior_fixity_digests)
        except ValidatorAbortException:
            pass
        return self.log.num_errors == 0
"
"    def status_str(self, prefix=''):
        """"""Return string of validator status, with optional prefix.""""""
        s = ''
        for message in sorted(self.messages):
            s += prefix + message + '\n'
        return s[:-1]
"
"    def status_str(self, prefix=''):
        """"""Return string representation of validation log, with optional prefix.""""""
        return self.log.status_str(prefix=prefix)
"
"    def is_valid(self, identifier):  # pylint: disable=unused-argument
        """"""Return True if identifier is valid, always True in this base implementation.""""""
        return True
"
"    def validate(self, inventory, extract_spec_version=False):
        """"""Validate a given inventory.

        If extract_spec_version is True then will look at the type value to determine
        the specification version. In the case that there is no type value or it isn't
        valid, then other tests will be based on the version given in self.spec_version.
        """"""
        # Basic structure
        self.inventory = inventory
        if 'id' in inventory:
            iid = inventory['id']
            if not isinstance(iid, str) or iid == '':
                self.error(""E037a"")
            else:
                # URI syntax https://www.rfc-editor.org/rfc/rfc3986.html#section-3.1 :
                # scheme = ALPHA *( ALPHA / DIGIT / ""+"" / ""-"" / ""."" )
                if not re.match(r'''[a-z][a-z\d\+\-\.]*:.+''', iid, re.IGNORECASE):
                    self.warning(""W005"", id=iid)
                self.id = iid
        else:
            self.error(""E036a"")
        if 'type' not in inventory:
            self.error(""E036b"")
        elif not isinstance(inventory['type'], str):
            self.error(""E999"")
        elif extract_spec_version:
            m = re.match(r'''https://ocfl.io/(\d+.\d)/spec/#inventory''', inventory['type'])
            if not m:
                self.error('E038b', got=inventory['type'], assumed_spec_version=self.spec_version)
            elif m.group(1) in self.spec_versions_supported:
                self.spec_version = m.group(1)
            else:
                self.error(""E038c"", got=m.group(1), assumed_spec_version=self.spec_version)
        elif inventory['type'] != 'https://ocfl.io/' + self.spec_version + '/spec/#inventory':
            self.error(""E038a"", expected='https://ocfl.io/' + self.spec_version + '/spec/#inventory', got=inventory['type'])
        if 'digestAlgorithm' not in inventory:
            self.error(""E036c"")
        elif inventory['digestAlgorithm'] == 'sha512':
            pass
        elif self.lax_digests:
            self.digest_algorithm = inventory['digestAlgorithm']
        elif inventory['digestAlgorithm'] == 'sha256':
            self.warning(""W004"")
            self.digest_algorithm = inventory['digestAlgorithm']
        else:
            self.error(""E039"", digest_algorithm=inventory['digestAlgorithm'])
        if 'contentDirectory' in inventory:
            # Careful only to set self.content_directory if value is safe
            cd = inventory['contentDirectory']
            if not isinstance(cd, str) or '/' in cd:
                self.error(""E017"")
            elif cd in ('.', '..'):
                self.error(""E018"")
            else:
                self.content_directory = cd
        manifest_files_correct_format = None
        if 'manifest' not in inventory:
            self.error(""E041a"")
        else:
            (self.manifest_files, manifest_files_correct_format, self.unnormalized_digests) = self.validate_manifest(inventory['manifest'])
        digests_used = []
        if 'versions' not in inventory:
            self.error(""E041b"")
        else:
            self.all_versions = self.validate_version_sequence(inventory['versions'])
            digests_used = self.validate_versions(inventory['versions'], self.all_versions, self.unnormalized_digests)
        if 'head' not in inventory:
            self.error(""E036d"")
        elif len(self.all_versions) > 0:
            self.head = self.all_versions[-1]
            if inventory['head'] != self.head:
                self.error(""E040"", got=inventory['head'], expected=self.head)
        if len(self.all_versions) == 0:
            # Abort tests is we don't have a valid version sequence, otherwise
            # there will likely be spurious subsequent error reports
            return
        if len(self.all_versions) > 0:
            if manifest_files_correct_format is not None:
                self.check_content_paths_map_to_versions(manifest_files_correct_format, self.all_versions)
            if self.manifest_files is not None:
                self.check_digests_present_and_used(self.manifest_files, digests_used)
        if 'fixity' in inventory:
            self.validate_fixity(inventory['fixity'], self.manifest_files)
"
"    def check_digests_present_and_used(self, manifest_files, digests_used):
        """"""Check all digests in manifest that are needed are present and used.""""""
        in_manifest = set(manifest_files.values())
        in_state = set(digests_used)
        not_in_manifest = in_state.difference(in_manifest)
        if len(not_in_manifest) > 0:
            self.error(""E050a"", digests="", "".join(sorted(not_in_manifest)))
        not_in_state = in_manifest.difference(in_state)
        if len(not_in_state) > 0:
            self.error(""E107"", digests="", "".join(sorted(not_in_state)))
"
"    def validate_as_prior_version(self, prior):
        """"""Check that prior is a valid prior version of the current inventory object.

        The input variable prior is also expected to be an InventoryValidator object
        and both self and prior inventories are assumed to have been checked for
        internal consistency.
        """"""
        # Must have a subset of versions which also checks zero padding format etc.
        if not set(prior.all_versions) < set(self.all_versions):
            self.error('E066a', prior_head=prior.head)
        else:
            # Check references to files but realize that there might be different
            # digest algorithms between versions
            version = 'no-version'
            for version in prior.all_versions:
                # If the digest algorithm is the same then we can make a
                # direct check on whether the state blocks match
                if prior.digest_algorithm == self.digest_algorithm:
                    self.compare_states_for_version(prior, version)
                # Now check the mappings from state to logical path, which must
                # be consistent even if the digestAlgorithm is different between
                # versions. Get maps from logical paths to files on disk:
                prior_map = get_logical_path_map(prior.inventory, version)
                self_map = get_logical_path_map(self.inventory, version)
                # Look first for differences in logical paths listed
                only_in_prior = prior_map.keys() - self_map.keys()
                only_in_self = self_map.keys() - prior_map.keys()
                if only_in_prior or only_in_self:
                    if only_in_prior:
                        self.error('E066b', version=version, prior_head=prior.head, only_in=prior.head, logical_paths=','.join(only_in_prior))
                    if only_in_self:
                        self.error('E066b', version=version, prior_head=prior.head, only_in=self.where, logical_paths=','.join(only_in_self))
                else:
                    # Check them all in details - digests must match
                    for logical_path, this_map in prior_map.items():
                        if not this_map.issubset(self_map[logical_path]):
                            self.error('E066c', version=version, prior_head=prior.head,
                                       logical_path=logical_path, prior_content=','.join(this_map),
                                       current_content=','.join(self_map[logical_path]))
                # Check metadata
                prior_version = prior.inventory['versions'][version]
                self_version = self.inventory['versions'][version]
                for key in ('created', 'message', 'user'):
                    if prior_version.get(key) != self_version.get(key):
                        self.warning('W011', version=version, prior_head=prior.head, key=key)
"
"def get_logical_path_map(inventory, version):
    """"""Get a map of logical paths in state to files on disk for version in inventory.

    Returns a dictionary: logical_path_in_state -> set(content_files)

    The set of content_files may includes references to duplicate files in
    later versions than the version being described.
    """"""
    state = inventory['versions'][version]['state']
    manifest = inventory['manifest']
    file_map = {}
    for digest in state:
        if digest in manifest:
            for file in state[digest]:
                file_map[file] = set(manifest[digest])
    return file_map
"
"    def validate_fixity(self, fixity, manifest_files):
        """"""Validate fixity block in inventory.

        Check the structure of the fixity block and makes sure that only files
        listed in the manifest are referenced.
        """"""
        if not isinstance(fixity, dict):
            # The value of fixity must be a JSON object. In v1.0 I catch not an object
            # as part of E056 but this was clarified as E111 in v1.1. The value may
            # be an empty object in either case
            self.error('E056a' if self.spec_version == '1.0' else 'E111')
        else:
            for digest_algorithm in fixity:
                known_digest = True
                try:
                    regex = digest_regex(digest_algorithm)
                except ValueError:
                    if not self.lax_digests:
                        self.error('E056b', algorithm=self.digest_algorithm)
                        continue
                    # Match anything
                    regex = r'''^.*$'''
                    known_digest = False
                fixity_algoritm_block = fixity[digest_algorithm]
                if not isinstance(fixity_algoritm_block, dict):
                    self.error('E057a', algorithm=self.digest_algorithm)
                else:
                    digests_seen = set()
                    for digest in fixity_algoritm_block:
                        m = re.match(regex, digest)
                        if not m:
                            self.error('E057b', digest=digest, algorithm=digest_algorithm)  # wrong form of digest
                        elif not isinstance(fixity_algoritm_block[digest], list):
                            self.error('E057c', digest=digest, algorithm=digest_algorithm)  # must have path list value
                        else:
                            if known_digest:
                                norm_digest = normalized_digest(digest, digest_algorithm)
                            else:
                                norm_digest = digest
                            if norm_digest in digests_seen:
                                # We have already seen this in different un-normalized form!
                                self.error(""E097"", digest=norm_digest, algorithm=digest_algorithm)
                            else:
                                digests_seen.add(norm_digest)
                            for file in fixity_algoritm_block[digest]:
                                if file not in manifest_files:
                                    self.error(""E057d"", digest=norm_digest, algorithm=digest_algorithm, path=file)
"
"def files_list(path):
    """"""
    Return the files in `path`
    """"""
    return os.listdir(path)
"
"def _group_files_by_xml_filename(source, xmls, files):
    """"""
    Group files by their XML basename

    Groups files by their XML basename and returns data in dict format.

    Parameters
    ----------
    xml_filename : str
        XML filenames
    files : list
        list of files in the folder or zipfile

    Returns
    -------
    dict
        key: name of the XML files
        value: Package
    """"""
    docs = {}
    for xml in xmls:
        basename = os.path.basename(xml)
        prefix, ext = os.path.splitext(basename)

        docs.setdefault(prefix, Package(source, prefix))

        # XML
        docs[prefix].xml = xml

        for file in select_filenames_by_prefix(prefix, files):
            # avalia arquivo do pacote, se é asset ou rendition
            component = _eval_file(prefix, file)
            if not component:
                continue

            # resultado do avaliação do pacote
            ftype = component.get(""ftype"")
            file_path = component[""file_path""]
            comp_id = component[""component_id""]

            if ftype:
                docs[prefix].add_asset(comp_id, file_path)
            else:
                docs[prefix].add_rendition(comp_id, file_path)
            files.remove(file)
    return docs
"
"def match_file_by_prefix(prefix, file_path):
    """"""
    Identify if a `file_path` belongs to a document package by a given `prefix`

    Retorna `True` para documentos pertencentes a um pacote.

    Parameters
    ----------
    prefix : str
        Filename prefix
    file_path : str
        File path
    Returns
    -------
    bool
        True - file belongs to the package
    """"""
    basename = os.path.basename(file_path)
    if basename.startswith(prefix + ""-""):
        return True
    if basename.startswith(prefix + "".""):
        return True
    return False
"
"def select_filenames_by_prefix(prefix, files):
    """"""
    Get files which belongs to a document package.

    Retorna os arquivos da lista `files` cujos nomes iniciam com `prefix`

    Parameters
    ----------
    prefix : str
        Filename prefix
    files : str list
        Files paths
    Returns
    -------
    list
        files paths which basename files matches to prefix
    """"""
    return [
        item
        for item in files
        if match_file_by_prefix(prefix, item)
    ]
"
"def _explore_folder(folder):
    """"""
    Get packages' data from folder

    Groups files by their XML basename and returns data in dict format.

    Parameters
    ----------
    folder : str
        Folder of the package
    Returns
    -------
    dict
    """"""
    if file_utils.is_folder(folder):
        data = _group_files_by_xml_filename(
            folder,
            file_utils.xml_files_list(folder),
            file_utils.files_list(folder),
        )
        return data
"
"def _eval_file(prefix, file_path):
    """"""
    Identifica o tipo de arquivo do pacote: `asset` ou `rendition`.

    Identifica o tipo de arquivo do pacote e atualiza `packages` com o tipo e
    o endereço do arquivo em análise.

    Parameters
    ----------
    prefix : str
        nome do arquivo XML sem extensão
    filename : str
        filename
    file_folder : str
        file folder

    Returns
    -------
    dict
    """"""
    if not match_file_by_prefix(prefix, file_path):
        # ignore files which name does not match
        return
    if file_path.endswith("".xml""):
        # ignore XML files
        return

    # it matches
    filename = os.path.basename(file_path)
    fname, ext = os.path.splitext(filename)

    lang = None
    if ext == "".pdf"":
        suffix = fname.replace(prefix, """")
        if fname == prefix:
            lang = ""original""
        elif len(suffix) == 3 and suffix[0] == ""-"":
            # it is a rendition
            lang = suffix[1:]

    if lang:
        return dict(
            component_id=lang,
            file_path=file_path,
        )
    else:
        return dict(
            component_id=filename,
            component_name=fname,
            ftype=ext[1:],
            file_path=file_path,
        )
"
"    def add_rendition(self, lang, file_path):
        """"""
        {
            ""original"": ""artigo02.pdf"",
            ""en"": ""artigo02-en.pdf"",
        }
        """"""
        self._renditions[lang] = self.file_path(file_path)
"
"    def add_asset(self, basename, file_path):
        """"""
        ""{
            ""artigo02-gf03.tiff"": ""/path/artigo02-gf03.tiff"",
            ""artigo02-gf03.jpg"": ""/path/artigo02-gf03.jpg"",
            ""artigo02-gf03.png"": ""/path/artigo02-gf03.png"",
        }
        """"""
        self._assets[basename] = self.file_path(file_path)
"
"def _explore_zipfile(zip_path):
    """"""
    Get packages' data from zip_path

    Groups files by their XML basename and returns data in dict format.

    Parameters
    ----------
    zip_path : str
        zip file path
    Returns
    -------
    dict
    """"""
    if file_utils.is_zipfile(zip_path):
        with ZipFile(zip_path, 'r'):
            data = _group_files_by_xml_filename(
                zip_path,
                file_utils.xml_files_list_from_zipfile(zip_path),
                file_utils.files_list_from_zipfile(zip_path),
            )
            return data
"
"def files_list_from_zipfile(zip_path):
    """"""
    Return the files in `zip_path`

    Example:

    ```
    [
        '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.pdf',
        '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.xml',
        '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.pdf',
        '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.xml',
        '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf01.tif',
        '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf02.tif',
        '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf03.tif',
        '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf04.tif',
    ]
    ```
    """"""
    with ZipFile(zip_path) as zf:
        return zf.namelist()
"
"def fix_namespace_prefix_w(content):
    """"""
    Convert os textos cujo padrão é `w:st=""` em `w-st=""`
    """"""
    pattern = r""\bw:[a-z]{1,}=\""""
    found_items = re.findall(pattern, content)
    logger.debug(""Found %i namespace prefix w"", len(found_items))
    for item in set(found_items):
        new_namespace = item.replace("":"", ""-"")
        logger.debug(""%s -> %s"" % (item, new_namespace))
        content = content.replace(item, new_namespace)
    return content
"
"def match_pubdate(node, pubdate_xpaths):
    """"""
    Retorna o primeiro match da lista de pubdate_xpaths
    """"""
    for xpath in pubdate_xpaths:
        pubdate = node.find(xpath)
        if pubdate is not None:
            return pubdate
"
"def _extract_number_and_supplment_from_issue_element(issue):
    """"""
    Extrai do conteúdo de <issue>xxxx</issue>, os valores number e suppl.
    Valores possíveis
    5 (suppl), 5 Suppl, 5 Suppl 1, 5 spe, 5 suppl, 5 suppl 1, 5 suppl. 1,
    25 Suppl 1, 2-5 suppl 1, 2spe, Spe, Supl. 1, Suppl, Suppl 12,
    s2, spe, spe 1, spe pr, spe2, spe.2, spepr, supp 1, supp5 1, suppl,
    suppl 1, suppl 5 pr, suppl 12, suppl 1-2, suppl. 1
    """"""
    if not issue:
        return None, None
    issue = issue.strip().replace(""."", """")
    splitted = [s for s in issue.split() if s]

    splitted = [""spe""
                if ""spe"" in s.lower() and s.isalpha() else s
                for s in splitted
                ]
    if len(splitted) == 1:
        issue = splitted[0]
        if issue.isdigit():
            return issue, None
        if ""sup"" in issue.lower():
            # match como sup*
            return None, ""0""
        if issue.startswith(""s""):
            if issue[1:].isdigit():
                return None, issue[1:]
        # match com spe, 2-5, 3B
        return issue, None

    if len(splitted) == 2:
        if ""sup"" in splitted[0].lower():
            return None, splitted[1]
        if ""sup"" in splitted[1].lower():
            return splitted[0], ""0""
        # match spe 4 -> spe4
        return """".join(splitted), None

    if len(splitted) == 3:
        if ""sup"" in splitted[1].lower():
            return splitted[0], splitted[2]
    # match ????
    return """".join(splitted), None
"
"    def pretty(self, indent=0, debug=False):
        """"""
        Return a pretty formatted representation of self.
        """"""
        debug_details = """"
        if debug:
            debug_details += f""<isliteral={self.isliteral!r}, iscanonical={self.iscanonical!r}>""

        obj = f""'{self.obj}'"" if isinstance(self.obj, str) else repr(self.obj)
        return ("" "" * indent) + f""{self.__class__.__name__}({debug_details}{obj})""
"
"    def absorb(self, args):
        """"""
        Given an `args` sequence of expressions, return a new list of expression
        applying absorption and negative absorption.

        See https://en.wikipedia.org/wiki/Absorption_law

        Absorption::

            A & (A | B) = A, A | (A & B) = A

        Negative absorption::

            A & (~A | B) = A & B, A | (~A & B) = A | B
        """"""
        args = list(args)
        if not args:
            args = list(self.args)
        i = 0
        while i < len(args):
            absorber = args[i]
            j = 0
            while j < len(args):
                if j == i:
                    j += 1
                    continue
                target = args[j]
                if not isinstance(target, self.dual):
                    j += 1
                    continue

                # Absorption
                if absorber in target:
                    del args[j]
                    if j < i:
                        i -= 1
                    continue

                # Negative absorption
                neg_absorber = self.NOT(absorber).cancel()
                if neg_absorber in target:
                    b = target.subtract(neg_absorber, simplify=False)
                    if b is None:
                        del args[j]
                        if j < i:
                            i -= 1
                        continue
                    else:
                        args[j] = b
                        j += 1
                        continue

                if isinstance(absorber, self.dual):
                    remove = None
                    for arg in absorber.args:
                        narg = self.NOT(arg).cancel()
                        if arg in target.args:
                            pass
                        elif narg in target.args:
                            if remove is None:
                                remove = narg
                            else:
                                remove = None
                                break
                        else:
                            remove = None
                            break
                    if remove is not None:
                        args[j] = target.subtract(remove, simplify=True)
                j += 1
            i += 1

        return args
"
"    def on(self, hook):
        """"""Decorator function to add a new handler to the registry.

        Args:
            hook (HookType): Hook attribute for which to register the handler.

        Returns:
            callable: Decorator for registering listeners for the specified
            hook.

        """"""

        def decorator(handler):
            self.registry[hook].append(handler)

            return handler

        return decorator
"
"def base_config(user, etcd_host=""localhost"", etcd_port=2379):
    """"""Creates a configuration with some simple parameters, which have a default value
    that can be set.

    Args:
        user (str): the name of the user for the static authentication
        etcd_host (str): the host for the database.
        etcd_port (int): the port for the database.

    Returns:
        dict: the created configuration.

    """"""
    return {
        ""tls"": {
            ""enabled"": False,
            ""cert"": ""cert_path"",
            ""key"": ""key_path"",
            ""client_ca"": ""client_ca_path"",
        },
        ""authentication"": {
            ""allow_anonymous"": True,
            ""strategy"": {
                ""keystone"": {""enabled"": False, ""endpoint"": ""http://localhost""},
                ""keycloak"": {
                    ""enabled"": False,
                    ""endpoint"": ""no_endpoint"",
                    ""realm"": ""krake"",
                },
                ""static"": {""enabled"": True, ""name"": user},
            },
            ""cors_origin"": ""http://example.com"",
        },
        ""authorization"": ""always-allow"",
        ""etcd"": {""host"": etcd_host, ""port"": etcd_port, ""retry_transactions"": 0},
        ""docs"": {""problem_base_url"": ""http://example.com/problem""},
        ""log"": {},
    }
"
"    def _fromutc(self, dt):
        """"""
        Given a timezone-aware datetime in a given timezone, calculates a
        timezone-aware datetime in a new timezone.

        Since this is the one time that we *know* we have an unambiguous
        datetime object, we take this opportunity to determine whether the
        datetime is ambiguous and in a ""fold"" state (e.g. if it's the first
        occurrence, chronologically, of the ambiguous datetime).

        :param dt:
            A timezone-aware :class:`datetime.datetime` object.
        """"""

        # Re-implement the algorithm from Python's datetime.py
        dtoff = dt.utcoffset()
        if dtoff is None:
            raise ValueError(""fromutc() requires a non-None utcoffset() ""
                             ""result"")

        # The original datetime.py code assumes that `dst()` defaults to
        # zero during ambiguous times. PEP 495 inverts this presumption, so
        # for pre-PEP 495 versions of python, we need to tweak the algorithm.
        dtdst = dt.dst()
        if dtdst is None:
            raise ValueError(""fromutc() requires a non-None dst() result"")
        delta = dtoff - dtdst

        dt += delta
        # Set fold=1 so we can default to being in the fold for
        # ambiguous dates.
        dtdst = enfold(dt, fold=1).dst()
        if dtdst is None:
            raise ValueError(""fromutc(): dt.dst gave inconsistent ""
                             ""results; cannot convert"")
        return dt + dtdst
"
"    def normalized(self):
        """"""
        Return a version of this object represented entirely using integer
        values for the relative attributes.

        >>> relativedelta(days=1.5, hours=2).normalized()
        relativedelta(days=+1, hours=+14)

        :return:
            Returns a :class:`dateutil.relativedelta.relativedelta` object.
        """"""
        # Cascade remainders down (rounding each to roughly nearest microsecond)
        days = int(self.days)

        hours_f = round(self.hours + 24 * (self.days - days), 11)
        hours = int(hours_f)

        minutes_f = round(self.minutes + 60 * (hours_f - hours), 10)
        minutes = int(minutes_f)

        seconds_f = round(self.seconds + 60 * (minutes_f - minutes), 8)
        seconds = int(seconds_f)

        microseconds = round(self.microseconds + 1e6 * (seconds_f - seconds))

        # Constructor carries overflow back up with call to _fix()
        return self.__class__(years=self.years, months=self.months,
                              days=days, hours=hours, minutes=minutes,
                              seconds=seconds, microseconds=microseconds,
                              leapdays=self.leapdays, year=self.year,
                              month=self.month, day=self.day,
                              weekday=self.weekday, hour=self.hour,
                              minute=self.minute, second=self.second,
                              microsecond=self.microsecond)
"
"def tzname_in_python2(namefunc):
    """"""Change unicode output into bytestrings in Python 2

    tzname() API changed in Python 3. It used to return bytes, but was changed
    to unicode strings
    """"""
    if PY2:
        @wraps(namefunc)
        def adjust_encoding(*args, **kwargs):
            name = namefunc(*args, **kwargs)
            if name is not None:
                name = name.encode()

            return name

        return adjust_encoding
    else:
        return namefunc
"
"def get_versions():
    """"""Get version information or return default if unable to do so.""""""
    # I am in _version.py, which lives at ROOT/VERSIONFILE_SOURCE. If we have
    # __file__, we can work backwards from there to the root. Some
    # py2exe/bbfreeze/non-CPython implementations don't do __file__, in which
    # case we can only use expanded keywords.

    cfg = get_config()
    verbose = cfg.verbose

    try:
        return git_versions_from_keywords(get_keywords(), cfg.tag_prefix, verbose)
    except NotThisMethod:
        pass

    try:
        root = os.path.realpath(__file__)
        # versionfile_source is the relative path from the top of the source
        # tree (where the .git directory might live) to this file. Invert
        # this to find the root from __file__.
        for _ in cfg.versionfile_source.split(""/""):
            root = os.path.dirname(root)
    except NameError:
        return {
            ""version"": ""0+unknown"",
            ""full-revisionid"": None,
            ""dirty"": None,
            ""error"": ""unable to find root of source tree"",
            ""date"": None,
        }

    try:
        pieces = git_pieces_from_vcs(cfg.tag_prefix, root, verbose)
        return render(pieces, cfg.style)
    except NotThisMethod:
        pass

    try:
        if cfg.parentdir_prefix:
            return versions_from_parentdir(cfg.parentdir_prefix, root, verbose)
    except NotThisMethod:
        pass

    return {
        ""version"": ""0+unknown"",
        ""full-revisionid"": None,
        ""dirty"": None,
        ""error"": ""unable to compute version"",
        ""date"": None,
    }
"
"def render(pieces, style):
    """"""Render the given version pieces into the requested style.""""""
    if pieces[""error""]:
        return {
            ""version"": ""unknown"",
            ""full-revisionid"": pieces.get(""long""),
            ""dirty"": None,
            ""error"": pieces[""error""],
            ""date"": None,
        }

    if not style or style == ""default"":
        style = ""pep440""  # the default

    if style == ""pep440"":
        rendered = render_pep440(pieces)
    elif style == ""pep440-branch"":
        rendered = render_pep440_branch(pieces)
    elif style == ""pep440-pre"":
        rendered = render_pep440_pre(pieces)
    elif style == ""pep440-post"":
        rendered = render_pep440_post(pieces)
    elif style == ""pep440-post-branch"":
        rendered = render_pep440_post_branch(pieces)
    elif style == ""pep440-old"":
        rendered = render_pep440_old(pieces)
    elif style == ""git-describe"":
        rendered = render_git_describe(pieces)
    elif style == ""git-describe-long"":
        rendered = render_git_describe_long(pieces)
    else:
        raise ValueError(""unknown style '%s'"" % style)

    return {
        ""version"": rendered,
        ""full-revisionid"": pieces[""long""],
        ""dirty"": pieces[""dirty""],
        ""error"": None,
        ""date"": pieces.get(""date""),
    }
"
"def plus_or_dot(pieces):
    """"""Return a + if we don't already have one, else return a .""""""
    if ""+"" in pieces.get(""closest-tag"", """"):
        return "".""
    return ""+""
"
"def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):
    """"""Call the given command(s).""""""
    assert isinstance(commands, list)
    process = None

    popen_kwargs = {}
    if sys.platform == ""win32"":
        # This hides the console window if pythonw.exe is used
        startupinfo = subprocess.STARTUPINFO()
        startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
        popen_kwargs[""startupinfo""] = startupinfo

    for command in commands:
        try:
            dispcmd = str([command] + args)
            # remember shell=False, so use git.cmd on windows, not just git
            process = subprocess.Popen(
                [command] + args,
                cwd=cwd,
                env=env,
                stdout=subprocess.PIPE,
                stderr=(subprocess.PIPE if hide_stderr else None),
                **popen_kwargs
            )
            break
        except OSError:
            e = sys.exc_info()[1]
            if e.errno == errno.ENOENT:
                continue
            if verbose:
                print(""unable to run %s"" % dispcmd)
                print(e)
            return None, None
    else:
        if verbose:
            print(""unable to find command, tried %s"" % (commands,))
        return None, None
    stdout = process.communicate()[0].strip().decode()
    if process.returncode != 0:
        if verbose:
            print(""unable to run %s (error)"" % dispcmd)
            print(""stdout was %s"" % stdout)
        return None, process.returncode
    return stdout, process.returncode
"
"def get_config():
    """"""Create, populate and return the VersioneerConfig() object.""""""
    # these strings are filled in when 'setup.py versioneer' creates
    # _version.py
    cfg = VersioneerConfig()
    cfg.VCS = ""git""
    cfg.style = ""pep440""
    cfg.tag_prefix = """"
    cfg.parentdir_prefix = ""None""
    cfg.versionfile_source = ""src/prestoplot/_version.py""
    cfg.verbose = False
    return cfg
"
"def register_vcs_handler(vcs, method):  # decorator
    """"""Create decorator to mark a method as the handler of a VCS.""""""

    def decorate(f):
        """"""Store f in HANDLERS[vcs][method].""""""
        if vcs not in HANDLERS:
            HANDLERS[vcs] = {}
        HANDLERS[vcs][method] = f
        return f

    return decorate
"
"    def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):
        """"""Validate storage root hierarchy.

        Returns:
            num_objects - number of objects checked
            good_objects - number of objects checked that were found to be valid
        """"""
        num_objects = 0
        good_objects = 0
        for dirpath in self.object_paths():
            if validate_objects:
                validator = Validator(check_digests=check_digests,
                                      lax_digests=self.lax_digests,
                                      show_warnings=show_warnings)
                if validator.validate(ocfl_opendir(self.root_fs, dirpath)):
                    good_objects += 1
                else:
                    logging.info(""Object at %s in INVALID"", dirpath)
                messages = validator.status_str(prefix='[[' + dirpath + ']]')
                if messages != '':
                    print(messages)
                num_objects += 1
        return num_objects, good_objects
"
"    def initialize(self):
        """"""Create and initialize a new OCFL storage root.""""""
        (parent, root_dir) = fs.path.split(self.root)
        parent_fs = open_fs(parent)
        if parent_fs.exists(root_dir):
            raise StoreException(""OCFL storage root %s already exists, aborting!"" % (self.root))
        self.root_fs = parent_fs.makedir(root_dir)
        logging.debug(""Created OCFL storage root at %s"", self.root)
        # Create root declaration
        Namaste(d=0, content=self.declaration_tvalue).write(pyfs=self.root_fs)
        # Create a layout declaration
        if self.disposition is not None:
            with self.root_fs.open(self.layout_file, 'w') as fh:
                layout = {'extension': self.disposition,
                          'description': ""Non-standard layout from ocfl-py disposition -- FIXME""}
                json.dump(layout, fh, sort_keys=True, indent=2)
        logging.info(""Created OCFL storage root %s"", self.root)
"
"def next_version(version):
    """"""Next version identifier following existing pattern.

    Must deal with both zero-prefixed and non-zero prefixed versions.
    """"""
    m = re.match(r'''v((\d)\d*)$''', version)
    if not m:
        raise ObjectException(""Bad version '%s'"" % version)
    next_n = int(m.group(1)) + 1
    if m.group(2) == '0':
        # Zero-padded version
        next_v = ('v0%0' + str(len(version) - 2) + 'd') % next_n
        if len(next_v) != len(version):
            raise ObjectException(""Version number overflow for zero-padded version %d to %d"" % (version, next_v))
        return next_v
    # Not zero-padded
    return 'v' + str(next_n)
"
"    def validate_version_inventories(self, version_dirs):
        """"""Each version SHOULD have an inventory up to that point.

        Also keep a record of any content digests different from those in the root inventory
        so that we can also check them when validating the content.

        version_dirs is an array of version directory names and is assumed to be in
        version sequence (1, 2, 3...).
        """"""
        prior_manifest_digests = {}  # file -> algorithm -> digest -> [versions]
        prior_fixity_digests = {}  # file -> algorithm -> digest -> [versions]
        if len(version_dirs) == 0:
            return prior_manifest_digests, prior_fixity_digests
        last_version = version_dirs[-1]
        prev_version_dir = ""NONE""  # will be set for first directory with inventory
        prev_spec_version = '1.0'  # lowest version
        for version_dir in version_dirs:
            inv_file = fs.path.join(version_dir, 'inventory.json')
            if not self.obj_fs.exists(inv_file):
                self.log.warning('W010', where=version_dir)
                continue
            # There is an inventory file for this version directory, check it
            if version_dir == last_version:
                # Don't validate in this case. Per the spec the inventory in the last version
                # MUST be identical to the copy in the object root, just check that
                root_inv_file = 'inventory.json'
                if not ocfl_files_identical(self.obj_fs, inv_file, root_inv_file):
                    self.log.error('E064', root_inv_file=root_inv_file, inv_file=inv_file)
                else:
                    # We could also just compare digest files but this gives a more helpful error for
                    # which file has the incorrect digest if they don't match
                    self.validate_inventory_digest(inv_file, self.digest_algorithm, where=version_dir)
                self.inventory_digest_files[version_dir] = 'inventory.json.' + self.digest_algorithm
                this_spec_version = self.spec_version
            else:
                # Note that inventories in prior versions may use different digest algorithms
                # from the current invenotory. Also,
                # an may accord with the same or earlier versions of the specification
                version_inventory, inv_validator = self.validate_inventory(inv_file, where=version_dir, extract_spec_version=True)
                this_spec_version = inv_validator.spec_version
                digest_algorithm = inv_validator.digest_algorithm
                self.validate_inventory_digest(inv_file, digest_algorithm, where=version_dir)
                self.inventory_digest_files[version_dir] = 'inventory.json.' + digest_algorithm
                if self.id and 'id' in version_inventory:
                    if version_inventory['id'] != self.id:
                        self.log.error('E037b', where=version_dir, root_id=self.id, version_id=version_inventory['id'])
                if 'manifest' in version_inventory:
                    # Check that all files listed in prior inventories are in manifest
                    not_seen = set(prior_manifest_digests.keys())
                    for digest in version_inventory['manifest']:
                        for filepath in version_inventory['manifest'][digest]:
                            # We rely on the validation to check that anything present is OK
                            if filepath in not_seen:
                                not_seen.remove(filepath)
                    if len(not_seen) > 0:
                        self.log.error('E023b', where=version_dir, missing_filepaths=', '.join(sorted(not_seen)))
                    # Record all prior digests
                    for unnormalized_digest in version_inventory['manifest']:
                        digest = normalized_digest(unnormalized_digest, digest_type=digest_algorithm)
                        for filepath in version_inventory['manifest'][unnormalized_digest]:
                            if filepath not in prior_manifest_digests:
                                prior_manifest_digests[filepath] = {}
                            if digest_algorithm not in prior_manifest_digests[filepath]:
                                prior_manifest_digests[filepath][digest_algorithm] = {}
                            if digest not in prior_manifest_digests[filepath][digest_algorithm]:
                                prior_manifest_digests[filepath][digest_algorithm][digest] = []
                            prior_manifest_digests[filepath][digest_algorithm][digest].append(version_dir)
                # Is this inventory an appropriate prior version of the object root inventory?
                if self.root_inv_validator is not None:
                    self.root_inv_validator.validate_as_prior_version(inv_validator)
                # Fixity blocks are independent in each version. Record all values and the versions
                # they occur in for later checks against content
                if 'fixity' in version_inventory:
                    for digest_algorithm in version_inventory['fixity']:
                        for unnormalized_digest in version_inventory['fixity'][digest_algorithm]:
                            digest = normalized_digest(unnormalized_digest, digest_type=digest_algorithm)
                            for filepath in version_inventory['fixity'][digest_algorithm][unnormalized_digest]:
                                if filepath not in prior_fixity_digests:
                                    prior_fixity_digests[filepath] = {}
                                if digest_algorithm not in prior_fixity_digests[filepath]:
                                    prior_fixity_digests[filepath][digest_algorithm] = {}
                                if digest not in prior_fixity_digests[filepath][digest_algorithm]:
                                    prior_fixity_digests[filepath][digest_algorithm][digest] = []
                                prior_fixity_digests[filepath][digest_algorithm][digest].append(version_dir)
            # We are validating the inventories in sequence and each new version must
            # follow the same or later spec version to previous inventories
            if prev_spec_version > this_spec_version:
                self.log.error('E103', where=version_dir, this_spec_version=this_spec_version,
                               prev_version_dir=prev_version_dir, prev_spec_version=prev_spec_version)
            prev_version_dir = version_dir
            prev_spec_version = this_spec_version
        return prior_manifest_digests, prior_fixity_digests
"
"def find_path_type(path):
    """"""Return a string indicating the type of thing at the given path.

    Return values:
        'root' - looks like an OCFL Storage Root
        'object' - looks like an OCFL Object
        'file' - a file, might be an inventory
        other string explains error description

    Looks only at ""0=*"" Namaste files to determine the directory type.
    """"""
    try:
        pyfs = open_fs(path, create=False)
    except (fs.opener.errors.OpenerError, fs.errors.CreateFailed):
        # Failed to open path as a filesystem, try enclosing directory
        # in case path is a file
        (parent, filename) = fs.path.split(path)
        try:
            pyfs = open_fs(parent, create=False)
        except (fs.opener.errors.OpenerError, fs.errors.CreateFailed) as e:
            return ""path cannot be opened, and nor can parent ("" + str(e) + "")""
        # Can open parent, is filename a file there?
        try:
            info = pyfs.getinfo(filename)
        except fs.errors.ResourceNotFound:
            return ""path does not exist""
        if info.is_dir:
            return ""directory that could not be opened as a filesystem, this should not happen""  # pragma: no cover
        return 'file'
    namastes = find_namastes(0, pyfs=pyfs)
    if len(namastes) == 0:
        return ""no 0= declaration file""
    # Look at the first 0= Namaste file that is of OCFL form to determine type, if there are
    # multiple declarations this will be caught later
    for namaste in namastes:
        m = re.match(r'''ocfl(_object)?_(\d+\.\d+)$''', namaste.tvalue)
        if m:
            return 'root' if m.group(1) is None else 'object'
    return ""unrecognized 0= declaration file or files (first is %s)"" % (namastes[0].tvalue)
"
"    def amend_bzparams(self, params, bug_ids):
        """"""Amend the Bugzilla params""""""
        if not self.all_include_fields():
            if ""include_fields"" in params:
                fields = params[""include_fields""]
                if isinstance(fields, list):
                    if ""id"" not in fields:
                        fields.append(""id"")
                elif isinstance(fields, str):
                    if fields != ""id"":
                        params[""include_fields""] = [fields, ""id""]
                else:
                    params[""include_fields""] = [fields, ""id""]
            else:
                params[""include_fields""] = [""id""]

            params[""include_fields""] += [""summary"", ""groups""]

            if self.has_assignee() and ""assigned_to"" not in params[""include_fields""]:
                params[""include_fields""].append(""assigned_to"")

            if self.has_product_component():
                if ""product"" not in params[""include_fields""]:
                    params[""include_fields""].append(""product"")
                if ""component"" not in params[""include_fields""]:
                    params[""include_fields""].append(""component"")

            if self.has_needinfo() and ""flags"" not in params[""include_fields""]:
                params[""include_fields""].append(""flags"")

        if bug_ids:
            params[""bug_id""] = bug_ids

        if self.filter_no_nag_keyword():
            n = utils.get_last_field_num(params)
            params.update(
                {
                    ""f"" + n: ""status_whiteboard"",
                    ""o"" + n: ""notsubstring"",
                    ""v"" + n: ""[no-nag]"",
                }
            )

        if self.ignore_meta():
            n = utils.get_last_field_num(params)
            params.update({""f"" + n: ""keywords"", ""o"" + n: ""nowords"", ""v"" + n: ""meta""})

        # Limit the checkers to X years. Unlimited if max_years = -1
        max_years = self.get_max_years()
        if max_years > 0:
            n = utils.get_last_field_num(params)
            params.update(
                {
                    f""f{n}"": ""creation_ts"",
                    f""o{n}"": ""greaterthan"",
                    f""v{n}"": f""-{max_years}y"",
                }
            )

        if self.has_default_products():
            params[""product""] = self.get_products()

        if not self.has_access_to_sec_bugs():
            n = utils.get_last_field_num(params)
            params.update({""f"" + n: ""bug_group"", ""o"" + n: ""isempty""})

        self.has_flags = ""flags"" in params.get(""include_fields"", [])
"
"def deep_merge_nodes(nodes):
    '''
    Given a nested borgmatic configuration data structure as a list of tuples in the form of:

        (
            ruamel.yaml.nodes.ScalarNode as a key,
            ruamel.yaml.nodes.MappingNode or other Node as a value,
        ),

    ... deep merge any node values corresponding to duplicate keys and return the result. If
    there are colliding keys with non-MappingNode values (e.g., integers or strings), the last
    of the values wins.

    For instance, given node values of:

        [
            (
                ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),
                MappingNode(tag='tag:yaml.org,2002:map', value=[
                    (
                        ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),
                        ScalarNode(tag='tag:yaml.org,2002:int', value='24')
                    ),
                    (
                        ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),
                        ScalarNode(tag='tag:yaml.org,2002:int', value='7')
                    ),
                ]),
            ),
            (
                ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),
                MappingNode(tag='tag:yaml.org,2002:map', value=[
                    (
                        ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),
                        ScalarNode(tag='tag:yaml.org,2002:int', value='5')
                    ),
                ]),
            ),
        ]

    ... the returned result would be:

        [
            (
                ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),
                MappingNode(tag='tag:yaml.org,2002:map', value=[
                    (
                        ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),
                        ScalarNode(tag='tag:yaml.org,2002:int', value='24')
                    ),
                    (
                        ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),
                        ScalarNode(tag='tag:yaml.org,2002:int', value='5')
                    ),
                ]),
            ),
        ]

    The purpose of deep merging like this is to support, for instance, merging one borgmatic
    configuration file into another for reuse, such that a configuration section (""retention"",
    etc.) does not completely replace the corresponding section in a merged file.
    '''
    # Map from original node key/value to the replacement merged node. DELETED_NODE as a replacement
    # node indications deletion.
    replaced_nodes = {}

    # To find nodes that require merging, compare each node with each other node.
    for a_key, a_value in nodes:
        for b_key, b_value in nodes:
            # If we've already considered one of the nodes for merging, skip it.
            if (a_key, a_value) in replaced_nodes or (b_key, b_value) in replaced_nodes:
                continue

            # If the keys match and the values are different, we need to merge these two A and B nodes.
            if a_key.tag == b_key.tag and a_key.value == b_key.value and a_value != b_value:
                # Since we're merging into the B node, consider the A node a duplicate and remove it.
                replaced_nodes[(a_key, a_value)] = DELETED_NODE

                # If we're dealing with MappingNodes, recurse and merge its values as well.
                if isinstance(b_value, ruamel.yaml.nodes.MappingNode):
                    replaced_nodes[(b_key, b_value)] = (
                        b_key,
                        ruamel.yaml.nodes.MappingNode(
                            tag=b_value.tag,
                            value=deep_merge_nodes(a_value.value + b_value.value),
                            start_mark=b_value.start_mark,
                            end_mark=b_value.end_mark,
                            flow_style=b_value.flow_style,
                            comment=b_value.comment,
                            anchor=b_value.anchor,
                        ),
                    )
                # If we're dealing with SequenceNodes, merge by appending one sequence to the other.
                elif isinstance(b_value, ruamel.yaml.nodes.SequenceNode):
                    replaced_nodes[(b_key, b_value)] = (
                        b_key,
                        ruamel.yaml.nodes.SequenceNode(
                            tag=b_value.tag,
                            value=a_value.value + b_value.value,
                            start_mark=b_value.start_mark,
                            end_mark=b_value.end_mark,
                            flow_style=b_value.flow_style,
                            comment=b_value.comment,
                            anchor=b_value.anchor,
                        ),
                    )

    return [
        replaced_nodes.get(node, node) for node in nodes if replaced_nodes.get(node) != DELETED_NODE
    ]
"
"def parse_arguments(*arguments):
    '''
    Given command-line arguments with which this script was invoked, parse the arguments and return
    them as an ArgumentParser instance.
    '''
    parser = ArgumentParser(description='Generate a sample borgmatic YAML configuration file.')
    parser.add_argument(
        '-s',
        '--source',
        dest='source_filename',
        help='Optional YAML configuration file to merge into the generated configuration, useful for upgrading your configuration',
    )
    parser.add_argument(
        '-d',
        '--destination',
        dest='destination_filename',
        default=DEFAULT_DESTINATION_CONFIG_FILENAME,
        help='Destination YAML configuration file, default: {}'.format(
            DEFAULT_DESTINATION_CONFIG_FILENAME
        ),
    )
    parser.add_argument(
        '--overwrite',
        default=False,
        action='store_true',
        help='Whether to overwrite any existing destination file, defaults to false',
    )

    return parser.parse_args(arguments)
"
"def parser_flags(parser):
    '''
    Given an argparse.ArgumentParser instance, return its argument flags in a space-separated
    string.
    '''
    return ' '.join(option for action in parser._actions for option in action.option_strings)
"
"def parse_arguments(*unparsed_arguments):
    '''
    Given command-line arguments with which this script was invoked, parse the arguments and return
    them as a dict mapping from subparser name (or ""global"") to an argparse.Namespace instance.
    '''
    top_level_parser, subparsers = make_parsers()

    arguments, remaining_arguments = parse_subparser_arguments(
        unparsed_arguments, subparsers.choices
    )
    arguments['global'] = top_level_parser.parse_args(remaining_arguments)

    if arguments['global'].excludes_filename:
        raise ValueError(
            'The --excludes option has been replaced with exclude_patterns in configuration'
        )

    if 'init' in arguments and arguments['global'].dry_run:
        raise ValueError('The init action cannot be used with the --dry-run option')

    if (
        'list' in arguments
        and 'info' in arguments
        and arguments['list'].json
        and arguments['info'].json
    ):
        raise ValueError('With the --json option, list and info actions cannot be used together')

    return arguments
"
"def parse_subparser_arguments(unparsed_arguments, subparsers):
    '''
    Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser
    instance, give each requested action's subparser a shot at parsing all arguments. This allows
    common arguments like ""--repository"" to be shared across multiple subparsers.

    Return the result as a tuple of (a dict mapping from subparser name to a parsed namespace of
    arguments, a list of remaining arguments not claimed by any subparser).
    '''
    arguments = collections.OrderedDict()
    remaining_arguments = list(unparsed_arguments)
    alias_to_subparser_name = {
        alias: subparser_name
        for subparser_name, aliases in SUBPARSER_ALIASES.items()
        for alias in aliases
    }

    # If the ""borg"" action is used, skip all other subparsers. This avoids confusion like
    # ""borg list"" triggering borgmatic's own list action.
    if 'borg' in unparsed_arguments:
        subparsers = {'borg': subparsers['borg']}

    for subparser_name, subparser in subparsers.items():
        if subparser_name not in remaining_arguments:
            continue

        canonical_name = alias_to_subparser_name.get(subparser_name, subparser_name)

        # If a parsed value happens to be the same as the name of a subparser, remove it from the
        # remaining arguments. This prevents, for instance, ""check --only extract"" from triggering
        # the ""extract"" subparser.
        parsed, unused_remaining = subparser.parse_known_args(unparsed_arguments)
        for value in vars(parsed).values():
            if isinstance(value, str):
                if value in subparsers:
                    remaining_arguments.remove(value)
            elif isinstance(value, list):
                for item in value:
                    if item in subparsers:
                        remaining_arguments.remove(item)

        arguments[canonical_name] = parsed

    # If no actions are explicitly requested, assume defaults: prune, compact, create, and check.
    if not arguments and '--help' not in unparsed_arguments and '-h' not in unparsed_arguments:
        for subparser_name in ('prune', 'compact', 'create', 'check'):
            subparser = subparsers[subparser_name]
            parsed, unused_remaining = subparser.parse_known_args(unparsed_arguments)
            arguments[subparser_name] = parsed

    remaining_arguments = list(unparsed_arguments)

    # Now ask each subparser, one by one, to greedily consume arguments.
    for subparser_name, subparser in subparsers.items():
        if subparser_name not in arguments.keys():
            continue

        subparser = subparsers[subparser_name]
        unused_parsed, remaining_arguments = subparser.parse_known_args(remaining_arguments)

    # Special case: If ""borg"" is present in the arguments, consume all arguments after (+1) the
    # ""borg"" action.
    if 'borg' in arguments:
        borg_options_index = remaining_arguments.index('borg') + 1
        arguments['borg'].options = remaining_arguments[borg_options_index:]
        remaining_arguments = remaining_arguments[:borg_options_index]

    # Remove the subparser names themselves.
    for subparser_name, subparser in subparsers.items():
        if subparser_name in remaining_arguments:
            remaining_arguments.remove(subparser_name)

    return (arguments, remaining_arguments)
"
"def make_parsers():
    '''
    Build a top-level parser and its subparsers and return them as a tuple.
    '''
    config_paths = collect.get_default_config_paths(expand_home=True)
    unexpanded_config_paths = collect.get_default_config_paths(expand_home=False)

    global_parser = ArgumentParser(add_help=False)
    global_parser.register('action', 'extend', Extend_action)
    global_group = global_parser.add_argument_group('global arguments')

    global_group.add_argument(
        '-c',
        '--config',
        nargs='*',
        dest='config_paths',
        default=config_paths,
        help='Configuration filenames or directories, defaults to: {}'.format(
            ' '.join(unexpanded_config_paths)
        ),
    )
    global_group.add_argument(
        '--excludes',
        dest='excludes_filename',
        help='Deprecated in favor of exclude_patterns within configuration',
    )
    global_group.add_argument(
        '-n',
        '--dry-run',
        dest='dry_run',
        action='store_true',
        help='Go through the motions, but do not actually write to any repositories',
    )
    global_group.add_argument(
        '-nc', '--no-color', dest='no_color', action='store_true', help='Disable colored output'
    )
    global_group.add_argument(
        '-v',
        '--verbosity',
        type=int,
        choices=range(-1, 3),
        default=0,
        help='Display verbose progress to the console (from only errors to very verbose: -1, 0, 1, or 2)',
    )
    global_group.add_argument(
        '--syslog-verbosity',
        type=int,
        choices=range(-1, 3),
        default=0,
        help='Log verbose progress to syslog (from only errors to very verbose: -1, 0, 1, or 2). Ignored when console is interactive or --log-file is given',
    )
    global_group.add_argument(
        '--log-file-verbosity',
        type=int,
        choices=range(-1, 3),
        default=0,
        help='Log verbose progress to log file (from only errors to very verbose: -1, 0, 1, or 2). Only used when --log-file is given',
    )
    global_group.add_argument(
        '--monitoring-verbosity',
        type=int,
        choices=range(-1, 3),
        default=0,
        help='Log verbose progress to monitoring integrations that support logging (from only errors to very verbose: -1, 0, 1, or 2)',
    )
    global_group.add_argument(
        '--log-file',
        type=str,
        default=None,
        help='Write log messages to this file instead of syslog',
    )
    global_group.add_argument(
        '--override',
        metavar='SECTION.OPTION=VALUE',
        nargs='+',
        dest='overrides',
        action='extend',
        help='One or more configuration file options to override with specified values',
    )
    global_group.add_argument(
        '--no-environment-interpolation',
        dest='resolve_env',
        action='store_false',
        help='Do not resolve environment variables in configuration file',
    )
    global_group.add_argument(
        '--bash-completion',
        default=False,
        action='store_true',
        help='Show bash completion script and exit',
    )
    global_group.add_argument(
        '--version',
        dest='version',
        default=False,
        action='store_true',
        help='Display installed version number of borgmatic and exit',
    )

    top_level_parser = ArgumentParser(
        description='''
            Simple, configuration-driven backup software for servers and workstations. If none of
            the action options are given, then borgmatic defaults to: prune, compact, create, and
            check.
            ''',
        parents=[global_parser],
    )

    subparsers = top_level_parser.add_subparsers(
        title='actions',
        metavar='',
        help='Specify zero or more actions. Defaults to prune, compact, create, and check. Use --help with action for details:',
    )
    init_parser = subparsers.add_parser(
        'init',
        aliases=SUBPARSER_ALIASES['init'],
        help='Initialize an empty Borg repository',
        description='Initialize an empty Borg repository',
        add_help=False,
    )
    init_group = init_parser.add_argument_group('init arguments')
    init_group.add_argument(
        '-e',
        '--encryption',
        dest='encryption_mode',
        help='Borg repository encryption mode',
        required=True,
    )
    init_group.add_argument(
        '--append-only',
        dest='append_only',
        action='store_true',
        help='Create an append-only repository',
    )
    init_group.add_argument(
        '--storage-quota',
        dest='storage_quota',
        help='Create a repository with a fixed storage quota',
    )
    init_group.add_argument('-h', '--help', action='help', help='Show this help message and exit')

    prune_parser = subparsers.add_parser(
        'prune',
        aliases=SUBPARSER_ALIASES['prune'],
        help='Prune archives according to the retention policy (with Borg 1.2+, run compact afterwards to actually free space)',
        description='Prune archives according to the retention policy (with Borg 1.2+, run compact afterwards to actually free space)',
        add_help=False,
    )
    prune_group = prune_parser.add_argument_group('prune arguments')
    prune_group.add_argument(
        '--stats',
        dest='stats',
        default=False,
        action='store_true',
        help='Display statistics of archive',
    )
    prune_group.add_argument(
        '--files', dest='files', default=False, action='store_true', help='Show per-file details'
    )
    prune_group.add_argument('-h', '--help', action='help', help='Show this help message and exit')

    compact_parser = subparsers.add_parser(
        'compact',
        aliases=SUBPARSER_ALIASES['compact'],
        help='Compact segments to free space (Borg 1.2+ only)',
        description='Compact segments to free space (Borg 1.2+ only)',
        add_help=False,
    )
    compact_group = compact_parser.add_argument_group('compact arguments')
    compact_group.add_argument(
        '--progress',
        dest='progress',
        default=False,
        action='store_true',
        help='Display progress as each segment is compacted',
    )
    compact_group.add_argument(
        '--cleanup-commits',
        dest='cleanup_commits',
        default=False,
        action='store_true',
        help='Cleanup commit-only 17-byte segment files left behind by Borg 1.1',
    )
    compact_group.add_argument(
        '--threshold',
        type=int,
        dest='threshold',
        help='Minimum saved space percentage threshold for compacting a segment, defaults to 10',
    )
    compact_group.add_argument(
        '-h', '--help', action='help', help='Show this help message and exit'
    )

    create_parser = subparsers.add_parser(
        'create',
        aliases=SUBPARSER_ALIASES['create'],
        help='Create archives (actually perform backups)',
        description='Create archives (actually perform backups)',
        add_help=False,
    )
    create_group = create_parser.add_argument_group('create arguments')
    create_group.add_argument(
        '--progress',
        dest='progress',
        default=False,
        action='store_true',
        help='Display progress for each file as it is backed up',
    )
    create_group.add_argument(
        '--stats',
        dest='stats',
        default=False,
        action='store_true',
        help='Display statistics of archive',
    )
    create_group.add_argument(
        '--files', dest='files', default=False, action='store_true', help='Show per-file details'
    )
    create_group.add_argument(
        '--json', dest='json', default=False, action='store_true', help='Output results as JSON'
    )
    create_group.add_argument('-h', '--help', action='help', help='Show this help message and exit')

    check_parser = subparsers.add_parser(
        'check',
        aliases=SUBPARSER_ALIASES['check'],
        help='Check archives for consistency',
        description='Check archives for consistency',
        add_help=False,
    )
    check_group = check_parser.add_argument_group('check arguments')
    check_group.add_argument(
        '--progress',
        dest='progress',
        default=False,
        action='store_true',
        help='Display progress for each file as it is checked',
    )
    check_group.add_argument(
        '--repair',
        dest='repair',
        default=False,
        action='store_true',
        help='Attempt to repair any inconsistencies found (for interactive use)',
    )
    check_group.add_argument(
        '--only',
        metavar='CHECK',
        choices=('repository', 'archives', 'data', 'extract'),
        dest='only',
        action='append',
        help='Run a particular consistency check (repository, archives, data, or extract) instead of configured checks (subject to configured frequency, can specify flag multiple times)',
    )
    check_group.add_argument(
        '--force',
        default=False,
        action='store_true',
        help='Ignore configured check frequencies and run checks unconditionally',
    )
    check_group.add_argument('-h', '--help', action='help', help='Show this help message and exit')

    extract_parser = subparsers.add_parser(
        'extract',
        aliases=SUBPARSER_ALIASES['extract'],
        help='Extract files from a named archive to the current directory',
        description='Extract a named archive to the current directory',
        add_help=False,
    )
    extract_group = extract_parser.add_argument_group('extract arguments')
    extract_group.add_argument(
        '--repository',
        help='Path of repository to extract, defaults to the configured repository if there is only one',
    )
    extract_group.add_argument(
        '--archive', help='Name of archive to extract (or ""latest"")', required=True
    )
    extract_group.add_argument(
        '--path',
        '--restore-path',
        metavar='PATH',
        nargs='+',
        dest='paths',
        help='Paths to extract from archive, defaults to the entire archive',
    )
    extract_group.add_argument(
        '--destination',
        metavar='PATH',
        dest='destination',
        help='Directory to extract files into, defaults to the current directory',
    )
    extract_group.add_argument(
        '--strip-components',
        type=int,
        metavar='NUMBER',
        dest='strip_components',
        help='Number of leading path components to remove from each extracted path. Skip paths with fewer elements',
    )
    extract_group.add_argument(
        '--progress',
        dest='progress',
        default=False,
        action='store_true',
        help='Display progress for each file as it is extracted',
    )
    extract_group.add_argument(
        '-h', '--help', action='help', help='Show this help message and exit'
    )

    export_tar_parser = subparsers.add_parser(
        'export-tar',
        aliases=SUBPARSER_ALIASES['export-tar'],
        help='Export an archive to a tar-formatted file or stream',
        description='Export an archive to a tar-formatted file or stream',
        add_help=False,
    )
    export_tar_group = export_tar_parser.add_argument_group('export-tar arguments')
    export_tar_group.add_argument(
        '--repository',
        help='Path of repository to export from, defaults to the configured repository if there is only one',
    )
    export_tar_group.add_argument(
        '--archive', help='Name of archive to export (or ""latest"")', required=True
    )
    export_tar_group.add_argument(
        '--path',
        metavar='PATH',
        nargs='+',
        dest='paths',
        help='Paths to export from archive, defaults to the entire archive',
    )
    export_tar_group.add_argument(
        '--destination',
        metavar='PATH',
        dest='destination',
        help='Path to destination export tar file, or ""-"" for stdout (but be careful about dirtying output with --verbosity or --files)',
        required=True,
    )
    export_tar_group.add_argument(
        '--tar-filter', help='Name of filter program to pipe data through'
    )
    export_tar_group.add_argument(
        '--files', default=False, action='store_true', help='Show per-file details'
    )
    export_tar_group.add_argument(
        '--strip-components',
        type=int,
        metavar='NUMBER',
        dest='strip_components',
        help='Number of leading path components to remove from each exported path. Skip paths with fewer elements',
    )
    export_tar_group.add_argument(
        '-h', '--help', action='help', help='Show this help message and exit'
    )

    mount_parser = subparsers.add_parser(
        'mount',
        aliases=SUBPARSER_ALIASES['mount'],
        help='Mount files from a named archive as a FUSE filesystem',
        description='Mount a named archive as a FUSE filesystem',
        add_help=False,
    )
    mount_group = mount_parser.add_argument_group('mount arguments')
    mount_group.add_argument(
        '--repository',
        help='Path of repository to use, defaults to the configured repository if there is only one',
    )
    mount_group.add_argument('--archive', help='Name of archive to mount (or ""latest"")')
    mount_group.add_argument(
        '--mount-point',
        metavar='PATH',
        dest='mount_point',
        help='Path where filesystem is to be mounted',
        required=True,
    )
    mount_group.add_argument(
        '--path',
        metavar='PATH',
        nargs='+',
        dest='paths',
        help='Paths to mount from archive, defaults to the entire archive',
    )
    mount_group.add_argument(
        '--foreground',
        dest='foreground',
        default=False,
        action='store_true',
        help='Stay in foreground until ctrl-C is pressed',
    )
    mount_group.add_argument('--options', dest='options', help='Extra Borg mount options')
    mount_group.add_argument('-h', '--help', action='help', help='Show this help message and exit')

    umount_parser = subparsers.add_parser(
        'umount',
        aliases=SUBPARSER_ALIASES['umount'],
        help='Unmount a FUSE filesystem that was mounted with ""borgmatic mount""',
        description='Unmount a mounted FUSE filesystem',
        add_help=False,
    )
    umount_group = umount_parser.add_argument_group('umount arguments')
    umount_group.add_argument(
        '--mount-point',
        metavar='PATH',
        dest='mount_point',
        help='Path of filesystem to unmount',
        required=True,
    )
    umount_group.add_argument('-h', '--help', action='help', help='Show this help message and exit')

    restore_parser = subparsers.add_parser(
        'restore',
        aliases=SUBPARSER_ALIASES['restore'],
        help='Restore database dumps from a named archive',
        description='Restore database dumps from a named archive. (To extract files instead, use ""borgmatic extract"".)',
        add_help=False,
    )
    restore_group = restore_parser.add_argument_group('restore arguments')
    restore_group.add_argument(
        '--repository',
        help='Path of repository to restore from, defaults to the configured repository if there is only one',
    )
    restore_group.add_argument(
        '--archive', help='Name of archive to restore from (or ""latest"")', required=True
    )
    restore_group.add_argument(
        '--database',
        metavar='NAME',
        nargs='+',
        dest='databases',
        help='Names of databases to restore from archive, defaults to all databases. Note that any databases to restore must be defined in borgmatic\'s configuration',
    )
    restore_group.add_argument(
        '-h', '--help', action='help', help='Show this help message and exit'
    )

    list_parser = subparsers.add_parser(
        'list',
        aliases=SUBPARSER_ALIASES['list'],
        help='List archives',
        description='List archives or the contents of an archive',
        add_help=False,
    )
    list_group = list_parser.add_argument_group('list arguments')
    list_group.add_argument(
        '--repository', help='Path of repository to list, defaults to the configured repositories',
    )
    list_group.add_argument('--archive', help='Name of archive to list (or ""latest"")')
    list_group.add_argument(
        '--path',
        metavar='PATH',
        nargs='+',
        dest='paths',
        help='Paths or patterns to list from a single selected archive (via ""--archive""), defaults to listing the entire archive',
    )
    list_group.add_argument(
        '--find',
        metavar='PATH',
        nargs='+',
        dest='find_paths',
        help='Partial paths or patterns to search for and list across multiple archives',
    )
    list_group.add_argument(
        '--short', default=False, action='store_true', help='Output only archive or path names'
    )
    list_group.add_argument('--format', help='Format for file listing')
    list_group.add_argument(
        '--json', default=False, action='store_true', help='Output results as JSON'
    )
    list_group.add_argument(
        '-P', '--prefix', help='Only list archive names starting with this prefix'
    )
    list_group.add_argument(
        '-a', '--glob-archives', metavar='GLOB', help='Only list archive names matching this glob'
    )
    list_group.add_argument(
        '--successful',
        default=True,
        action='store_true',
        help='Deprecated in favor of listing successful (non-checkpoint) backups by default in newer versions of Borg',
    )
    list_group.add_argument(
        '--sort-by', metavar='KEYS', help='Comma-separated list of sorting keys'
    )
    list_group.add_argument(
        '--first', metavar='N', help='List first N archives after other filters are applied'
    )
    list_group.add_argument(
        '--last', metavar='N', help='List last N archives after other filters are applied'
    )
    list_group.add_argument(
        '-e', '--exclude', metavar='PATTERN', help='Exclude paths matching the pattern'
    )
    list_group.add_argument(
        '--exclude-from', metavar='FILENAME', help='Exclude paths from exclude file, one per line'
    )
    list_group.add_argument('--pattern', help='Include or exclude paths matching a pattern')
    list_group.add_argument(
        '--patterns-from',
        metavar='FILENAME',
        help='Include or exclude paths matching patterns from pattern file, one per line',
    )
    list_group.add_argument('-h', '--help', action='help', help='Show this help message and exit')

    info_parser = subparsers.add_parser(
        'info',
        aliases=SUBPARSER_ALIASES['info'],
        help='Display summary information on archives',
        description='Display summary information on archives',
        add_help=False,
    )
    info_group = info_parser.add_argument_group('info arguments')
    info_group.add_argument(
        '--repository',
        help='Path of repository to show info for, defaults to the configured repository if there is only one',
    )
    info_group.add_argument('--archive', help='Name of archive to show info for (or ""latest"")')
    info_group.add_argument(
        '--json', dest='json', default=False, action='store_true', help='Output results as JSON'
    )
    info_group.add_argument(
        '-P', '--prefix', help='Only show info for archive names starting with this prefix'
    )
    info_group.add_argument(
        '-a',
        '--glob-archives',
        metavar='GLOB',
        help='Only show info for archive names matching this glob',
    )
    info_group.add_argument(
        '--sort-by', metavar='KEYS', help='Comma-separated list of sorting keys'
    )
    info_group.add_argument(
        '--first',
        metavar='N',
        help='Show info for first N archives after other filters are applied',
    )
    info_group.add_argument(
        '--last', metavar='N', help='Show info for last N archives after other filters are applied'
    )
    info_group.add_argument('-h', '--help', action='help', help='Show this help message and exit')

    borg_parser = subparsers.add_parser(
        'borg',
        aliases=SUBPARSER_ALIASES['borg'],
        help='Run an arbitrary Borg command',
        description='Run an arbitrary Borg command based on borgmatic\'s configuration',
        add_help=False,
    )
    borg_group = borg_parser.add_argument_group('borg arguments')
    borg_group.add_argument(
        '--repository',
        help='Path of repository to pass to Borg, defaults to the configured repositories',
    )
    borg_group.add_argument('--archive', help='Name of archive to pass to Borg (or ""latest"")')
    borg_group.add_argument(
        '--',
        metavar='OPTION',
        dest='options',
        nargs='+',
        help='Options to pass to Borg, command first (""create"", ""list"", etc). ""--"" is optional. To specify the repository or the archive, you must use --repository or --archive instead of providing them here.',
    )
    borg_group.add_argument('-h', '--help', action='help', help='Show this help message and exit')

    return top_level_parser, subparsers
"
"def deep_merge_nodes(nodes):
    '''
    Given a nested borgmatic configuration data structure as a list of tuples in the form of:

        (
            ruamel.yaml.nodes.ScalarNode as a key,
            ruamel.yaml.nodes.MappingNode or other Node as a value,
        ),

    ... deep merge any node values corresponding to duplicate keys and return the result. If
    there are colliding keys with non-MappingNode values (e.g., integers or strings), the last
    of the values wins.

    For instance, given node values of:

        [
            (
                ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),
                MappingNode(tag='tag:yaml.org,2002:map', value=[
                    (
                        ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),
                        ScalarNode(tag='tag:yaml.org,2002:int', value='24')
                    ),
                    (
                        ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),
                        ScalarNode(tag='tag:yaml.org,2002:int', value='7')
                    ),
                ]),
            ),
            (
                ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),
                MappingNode(tag='tag:yaml.org,2002:map', value=[
                    (
                        ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),
                        ScalarNode(tag='tag:yaml.org,2002:int', value='5')
                    ),
                ]),
            ),
        ]

    ... the returned result would be:

        [
            (
                ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),
                MappingNode(tag='tag:yaml.org,2002:map', value=[
                    (
                        ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),
                        ScalarNode(tag='tag:yaml.org,2002:int', value='24')
                    ),
                    (
                        ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),
                        ScalarNode(tag='tag:yaml.org,2002:int', value='5')
                    ),
                ]),
            ),
        ]

    The purpose of deep merging like this is to support, for instance, merging one borgmatic
    configuration file into another for reuse, such that a configuration section (""retention"",
    etc.) does not completely replace the corresponding section in a merged file.
    '''
    # Map from original node key/value to the replacement merged node. DELETED_NODE as a replacement
    # node indications deletion.
    replaced_nodes = {}

    # To find nodes that require merging, compare each node with each other node.
    for a_key, a_value in nodes:
        for b_key, b_value in nodes:
            # If we've already considered one of the nodes for merging, skip it.
            if (a_key, a_value) in replaced_nodes or (b_key, b_value) in replaced_nodes:
                continue

            # If the keys match and the values are different, we need to merge these two A and B nodes.
            if a_key.tag == b_key.tag and a_key.value == b_key.value and a_value != b_value:
                # Since we're merging into the B node, consider the A node a duplicate and remove it.
                replaced_nodes[(a_key, a_value)] = DELETED_NODE

                # If we're dealing with MappingNodes, recurse and merge its values as well.
                if isinstance(b_value, ruamel.yaml.nodes.MappingNode):
                    replaced_nodes[(b_key, b_value)] = (
                        b_key,
                        ruamel.yaml.nodes.MappingNode(
                            tag=b_value.tag,
                            value=deep_merge_nodes(a_value.value + b_value.value),
                            start_mark=b_value.start_mark,
                            end_mark=b_value.end_mark,
                            flow_style=b_value.flow_style,
                            comment=b_value.comment,
                            anchor=b_value.anchor,
                        ),
                    )
                # If we're dealing with SequenceNodes, merge by appending one sequence to the other.
                elif isinstance(b_value, ruamel.yaml.nodes.SequenceNode):
                    replaced_nodes[(b_key, b_value)] = (
                        b_key,
                        ruamel.yaml.nodes.SequenceNode(
                            tag=b_value.tag,
                            value=a_value.value + b_value.value,
                            start_mark=b_value.start_mark,
                            end_mark=b_value.end_mark,
                            flow_style=b_value.flow_style,
                            comment=b_value.comment,
                            anchor=b_value.anchor,
                        ),
                    )

    return [
        replaced_nodes.get(node, node) for node in nodes if replaced_nodes.get(node) != DELETED_NODE
    ]
"
"def parse_arguments(*arguments):
    '''
    Given command-line arguments with which this script was invoked, parse the arguments and return
    them as an ArgumentParser instance.
    '''
    parser = ArgumentParser(description='Generate a sample borgmatic YAML configuration file.')
    parser.add_argument(
        '-s',
        '--source',
        dest='source_filename',
        help='Optional YAML configuration file to merge into the generated configuration, useful for upgrading your configuration',
    )
    parser.add_argument(
        '-d',
        '--destination',
        dest='destination_filename',
        default=DEFAULT_DESTINATION_CONFIG_FILENAME,
        help='Destination YAML configuration file, default: {}'.format(
            DEFAULT_DESTINATION_CONFIG_FILENAME
        ),
    )
    parser.add_argument(
        '--overwrite',
        default=False,
        action='store_true',
        help='Whether to overwrite any existing destination file, defaults to false',
    )

    return parser.parse_args(arguments)
"
"def parser_flags(parser):
    '''
    Given an argparse.ArgumentParser instance, return its argument flags in a space-separated
    string.
    '''
    return ' '.join(option for action in parser._actions for option in action.option_strings)
"
"def bash_completion():
    '''
    Return a bash completion script for the borgmatic command. Produce this by introspecting
    borgmatic's command-line argument parsers.
    '''
    top_level_parser, subparsers = arguments.make_parsers()
    global_flags = parser_flags(top_level_parser)
    actions = ' '.join(subparsers.choices.keys())

    # Avert your eyes.
    return '\n'.join(
        (
            'check_version() {',
            '    local this_script=""$(cat ""$BASH_SOURCE"" 2> /dev/null)""',
            '    local installed_script=""$(borgmatic --bash-completion 2> /dev/null)""',
            '    if [ ""$this_script"" != ""$installed_script"" ] && [ ""$installed_script"" != """" ];'
            '        then cat << EOF\n%s\nEOF' % UPGRADE_MESSAGE,
            '    fi',
            '}',
            'complete_borgmatic() {',
        )
        + tuple(
            '''    if [[ "" ${COMP_WORDS[*]} "" =~ "" %s "" ]]; then
        COMPREPLY=($(compgen -W ""%s %s %s"" -- ""${COMP_WORDS[COMP_CWORD]}""))
        return 0
    fi'''
            % (action, parser_flags(subparser), actions, global_flags)
            for action, subparser in subparsers.choices.items()
        )
        + (
            '    COMPREPLY=($(compgen -W ""%s %s"" -- ""${COMP_WORDS[COMP_CWORD]}""))'
            % (actions, global_flags),
            '    (check_version &)',
            '}',
            '\ncomplete -o bashdefault -o default -F complete_borgmatic borgmatic',
        )
    )
"
"def parse_arguments(*unparsed_arguments):
    '''
    Given command-line arguments with which this script was invoked, parse the arguments and return
    them as a dict mapping from subparser name (or ""global"") to an argparse.Namespace instance.
    '''
    top_level_parser, subparsers = make_parsers()

    arguments, remaining_arguments = parse_subparser_arguments(
        unparsed_arguments, subparsers.choices
    )
    arguments['global'] = top_level_parser.parse_args(remaining_arguments)

    if arguments['global'].excludes_filename:
        raise ValueError(
            'The --excludes option has been replaced with exclude_patterns in configuration'
        )

    if 'init' in arguments and arguments['global'].dry_run:
        raise ValueError('The init action cannot be used with the --dry-run option')

    if (
        'list' in arguments
        and 'info' in arguments
        and arguments['list'].json
        and arguments['info'].json
    ):
        raise ValueError('With the --json option, list and info actions cannot be used together')

    return arguments
"
"def parse_subparser_arguments(unparsed_arguments, subparsers):
    '''
    Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser
    instance, give each requested action's subparser a shot at parsing all arguments. This allows
    common arguments like ""--repository"" to be shared across multiple subparsers.

    Return the result as a tuple of (a dict mapping from subparser name to a parsed namespace of
    arguments, a list of remaining arguments not claimed by any subparser).
    '''
    arguments = collections.OrderedDict()
    remaining_arguments = list(unparsed_arguments)
    alias_to_subparser_name = {
        alias: subparser_name
        for subparser_name, aliases in SUBPARSER_ALIASES.items()
        for alias in aliases
    }

    # If the ""borg"" action is used, skip all other subparsers. This avoids confusion like
    # ""borg list"" triggering borgmatic's own list action.
    if 'borg' in unparsed_arguments:
        subparsers = {'borg': subparsers['borg']}

    for subparser_name, subparser in subparsers.items():
        if subparser_name not in remaining_arguments:
            continue

        canonical_name = alias_to_subparser_name.get(subparser_name, subparser_name)

        # If a parsed value happens to be the same as the name of a subparser, remove it from the
        # remaining arguments. This prevents, for instance, ""check --only extract"" from triggering
        # the ""extract"" subparser.
        parsed, unused_remaining = subparser.parse_known_args(unparsed_arguments)
        for value in vars(parsed).values():
            if isinstance(value, str):
                if value in subparsers:
                    remaining_arguments.remove(value)
            elif isinstance(value, list):
                for item in value:
                    if item in subparsers:
                        remaining_arguments.remove(item)

        arguments[canonical_name] = parsed

    # If no actions are explicitly requested, assume defaults: prune, compact, create, and check.
    if not arguments and '--help' not in unparsed_arguments and '-h' not in unparsed_arguments:
        for subparser_name in ('prune', 'compact', 'create', 'check'):
            subparser = subparsers[subparser_name]
            parsed, unused_remaining = subparser.parse_known_args(unparsed_arguments)
            arguments[subparser_name] = parsed

    remaining_arguments = list(unparsed_arguments)

    # Now ask each subparser, one by one, to greedily consume arguments.
    for subparser_name, subparser in subparsers.items():
        if subparser_name not in arguments.keys():
            continue

        subparser = subparsers[subparser_name]
        unused_parsed, remaining_arguments = subparser.parse_known_args(remaining_arguments)

    # Special case: If ""borg"" is present in the arguments, consume all arguments after (+1) the
    # ""borg"" action.
    if 'borg' in arguments:
        borg_options_index = remaining_arguments.index('borg') + 1
        arguments['borg'].options = remaining_arguments[borg_options_index:]
        remaining_arguments = remaining_arguments[:borg_options_index]

    # Remove the subparser names themselves.
    for subparser_name, subparser in subparsers.items():
        if subparser_name in remaining_arguments:
            remaining_arguments.remove(subparser_name)

    return (arguments, remaining_arguments)
"
"def make_parsers():
    '''
    Build a top-level parser and its subparsers and return them as a tuple.
    '''
    config_paths = collect.get_default_config_paths(expand_home=True)
    unexpanded_config_paths = collect.get_default_config_paths(expand_home=False)

    global_parser = ArgumentParser(add_help=False)
    global_parser.register('action', 'extend', Extend_action)
    global_group = global_parser.add_argument_group('global arguments')

    global_group.add_argument(
        '-c',
        '--config',
        nargs='*',
        dest='config_paths',
        default=config_paths,
        help='Configuration filenames or directories, defaults to: {}'.format(
            ' '.join(unexpanded_config_paths)
        ),
    )
    global_group.add_argument(
        '--excludes',
        dest='excludes_filename',
        help='Deprecated in favor of exclude_patterns within configuration',
    )
    global_group.add_argument(
        '-n',
        '--dry-run',
        dest='dry_run',
        action='store_true',
        help='Go through the motions, but do not actually write to any repositories',
    )
    global_group.add_argument(
        '-nc', '--no-color', dest='no_color', action='store_true', help='Disable colored output'
    )
    global_group.add_argument(
        '-v',
        '--verbosity',
        type=int,
        choices=range(-1, 3),
        default=0,
        help='Display verbose progress to the console (from only errors to very verbose: -1, 0, 1, or 2)',
    )
    global_group.add_argument(
        '--syslog-verbosity',
        type=int,
        choices=range(-1, 3),
        default=0,
        help='Log verbose progress to syslog (from only errors to very verbose: -1, 0, 1, or 2). Ignored when console is interactive or --log-file is given',
    )
    global_group.add_argument(
        '--log-file-verbosity',
        type=int,
        choices=range(-1, 3),
        default=0,
        help='Log verbose progress to log file (from only errors to very verbose: -1, 0, 1, or 2). Only used when --log-file is given',
    )
    global_group.add_argument(
        '--monitoring-verbosity',
        type=int,
        choices=range(-1, 3),
        default=0,
        help='Log verbose progress to monitoring integrations that support logging (from only errors to very verbose: -1, 0, 1, or 2)',
    )
    global_group.add_argument(
        '--log-file',
        type=str,
        default=None,
        help='Write log messages to this file instead of syslog',
    )
    global_group.add_argument(
        '--override',
        metavar='SECTION.OPTION=VALUE',
        nargs='+',
        dest='overrides',
        action='extend',
        help='One or more configuration file options to override with specified values',
    )
    global_group.add_argument(
        '--no-environment-interpolation',
        dest='resolve_env',
        action='store_false',
        help='Do not resolve environment variables in configuration file',
    )
    global_group.add_argument(
        '--bash-completion',
        default=False,
        action='store_true',
        help='Show bash completion script and exit',
    )
    global_group.add_argument(
        '--version',
        dest='version',
        default=False,
        action='store_true',
        help='Display installed version number of borgmatic and exit',
    )

    top_level_parser = ArgumentParser(
        description='''
            Simple, configuration-driven backup software for servers and workstations. If none of
            the action options are given, then borgmatic defaults to: prune, compact, create, and
            check.
            ''',
        parents=[global_parser],
    )

    subparsers = top_level_parser.add_subparsers(
        title='actions',
        metavar='',
        help='Specify zero or more actions. Defaults to prune, compact, create, and check. Use --help with action for details:',
    )
    init_parser = subparsers.add_parser(
        'init',
        aliases=SUBPARSER_ALIASES['init'],
        help='Initialize an empty Borg repository',
        description='Initialize an empty Borg repository',
        add_help=False,
    )
    init_group = init_parser.add_argument_group('init arguments')
    init_group.add_argument(
        '-e',
        '--encryption',
        dest='encryption_mode',
        help='Borg repository encryption mode',
        required=True,
    )
    init_group.add_argument(
        '--append-only',
        dest='append_only',
        action='store_true',
        help='Create an append-only repository',
    )
    init_group.add_argument(
        '--storage-quota',
        dest='storage_quota',
        help='Create a repository with a fixed storage quota',
    )
    init_group.add_argument('-h', '--help', action='help', help='Show this help message and exit')

    prune_parser = subparsers.add_parser(
        'prune',
        aliases=SUBPARSER_ALIASES['prune'],
        help='Prune archives according to the retention policy (with Borg 1.2+, run compact afterwards to actually free space)',
        description='Prune archives according to the retention policy (with Borg 1.2+, run compact afterwards to actually free space)',
        add_help=False,
    )
    prune_group = prune_parser.add_argument_group('prune arguments')
    prune_group.add_argument(
        '--stats',
        dest='stats',
        default=False,
        action='store_true',
        help='Display statistics of archive',
    )
    prune_group.add_argument(
        '--files', dest='files', default=False, action='store_true', help='Show per-file details'
    )
    prune_group.add_argument('-h', '--help', action='help', help='Show this help message and exit')

    compact_parser = subparsers.add_parser(
        'compact',
        aliases=SUBPARSER_ALIASES['compact'],
        help='Compact segments to free space (Borg 1.2+ only)',
        description='Compact segments to free space (Borg 1.2+ only)',
        add_help=False,
    )
    compact_group = compact_parser.add_argument_group('compact arguments')
    compact_group.add_argument(
        '--progress',
        dest='progress',
        default=False,
        action='store_true',
        help='Display progress as each segment is compacted',
    )
    compact_group.add_argument(
        '--cleanup-commits',
        dest='cleanup_commits',
        default=False,
        action='store_true',
        help='Cleanup commit-only 17-byte segment files left behind by Borg 1.1',
    )
    compact_group.add_argument(
        '--threshold',
        type=int,
        dest='threshold',
        help='Minimum saved space percentage threshold for compacting a segment, defaults to 10',
    )
    compact_group.add_argument(
        '-h', '--help', action='help', help='Show this help message and exit'
    )

    create_parser = subparsers.add_parser(
        'create',
        aliases=SUBPARSER_ALIASES['create'],
        help='Create archives (actually perform backups)',
        description='Create archives (actually perform backups)',
        add_help=False,
    )
    create_group = create_parser.add_argument_group('create arguments')
    create_group.add_argument(
        '--progress',
        dest='progress',
        default=False,
        action='store_true',
        help='Display progress for each file as it is backed up',
    )
    create_group.add_argument(
        '--stats',
        dest='stats',
        default=False,
        action='store_true',
        help='Display statistics of archive',
    )
    create_group.add_argument(
        '--files', dest='files', default=False, action='store_true', help='Show per-file details'
    )
    create_group.add_argument(
        '--json', dest='json', default=False, action='store_true', help='Output results as JSON'
    )
    create_group.add_argument('-h', '--help', action='help', help='Show this help message and exit')

    check_parser = subparsers.add_parser(
        'check',
        aliases=SUBPARSER_ALIASES['check'],
        help='Check archives for consistency',
        description='Check archives for consistency',
        add_help=False,
    )
    check_group = check_parser.add_argument_group('check arguments')
    check_group.add_argument(
        '--progress',
        dest='progress',
        default=False,
        action='store_true',
        help='Display progress for each file as it is checked',
    )
    check_group.add_argument(
        '--repair',
        dest='repair',
        default=False,
        action='store_true',
        help='Attempt to repair any inconsistencies found (for interactive use)',
    )
    check_group.add_argument(
        '--only',
        metavar='CHECK',
        choices=('repository', 'archives', 'data', 'extract'),
        dest='only',
        action='append',
        help='Run a particular consistency check (repository, archives, data, or extract) instead of configured checks (subject to configured frequency, can specify flag multiple times)',
    )
    check_group.add_argument(
        '--force',
        default=False,
        action='store_true',
        help='Ignore configured check frequencies and run checks unconditionally',
    )
    check_group.add_argument('-h', '--help', action='help', help='Show this help message and exit')

    extract_parser = subparsers.add_parser(
        'extract',
        aliases=SUBPARSER_ALIASES['extract'],
        help='Extract files from a named archive to the current directory',
        description='Extract a named archive to the current directory',
        add_help=False,
    )
    extract_group = extract_parser.add_argument_group('extract arguments')
    extract_group.add_argument(
        '--repository',
        help='Path of repository to extract, defaults to the configured repository if there is only one',
    )
    extract_group.add_argument(
        '--archive', help='Name of archive to extract (or ""latest"")', required=True
    )
    extract_group.add_argument(
        '--path',
        '--restore-path',
        metavar='PATH',
        nargs='+',
        dest='paths',
        help='Paths to extract from archive, defaults to the entire archive',
    )
    extract_group.add_argument(
        '--destination',
        metavar='PATH',
        dest='destination',
        help='Directory to extract files into, defaults to the current directory',
    )
    extract_group.add_argument(
        '--strip-components',
        type=int,
        metavar='NUMBER',
        dest='strip_components',
        help='Number of leading path components to remove from each extracted path. Skip paths with fewer elements',
    )
    extract_group.add_argument(
        '--progress',
        dest='progress',
        default=False,
        action='store_true',
        help='Display progress for each file as it is extracted',
    )
    extract_group.add_argument(
        '-h', '--help', action='help', help='Show this help message and exit'
    )

    export_tar_parser = subparsers.add_parser(
        'export-tar',
        aliases=SUBPARSER_ALIASES['export-tar'],
        help='Export an archive to a tar-formatted file or stream',
        description='Export an archive to a tar-formatted file or stream',
        add_help=False,
    )
    export_tar_group = export_tar_parser.add_argument_group('export-tar arguments')
    export_tar_group.add_argument(
        '--repository',
        help='Path of repository to export from, defaults to the configured repository if there is only one',
    )
    export_tar_group.add_argument(
        '--archive', help='Name of archive to export (or ""latest"")', required=True
    )
    export_tar_group.add_argument(
        '--path',
        metavar='PATH',
        nargs='+',
        dest='paths',
        help='Paths to export from archive, defaults to the entire archive',
    )
    export_tar_group.add_argument(
        '--destination',
        metavar='PATH',
        dest='destination',
        help='Path to destination export tar file, or ""-"" for stdout (but be careful about dirtying output with --verbosity or --files)',
        required=True,
    )
    export_tar_group.add_argument(
        '--tar-filter', help='Name of filter program to pipe data through'
    )
    export_tar_group.add_argument(
        '--files', default=False, action='store_true', help='Show per-file details'
    )
    export_tar_group.add_argument(
        '--strip-components',
        type=int,
        metavar='NUMBER',
        dest='strip_components',
        help='Number of leading path components to remove from each exported path. Skip paths with fewer elements',
    )
    export_tar_group.add_argument(
        '-h', '--help', action='help', help='Show this help message and exit'
    )

    mount_parser = subparsers.add_parser(
        'mount',
        aliases=SUBPARSER_ALIASES['mount'],
        help='Mount files from a named archive as a FUSE filesystem',
        description='Mount a named archive as a FUSE filesystem',
        add_help=False,
    )
    mount_group = mount_parser.add_argument_group('mount arguments')
    mount_group.add_argument(
        '--repository',
        help='Path of repository to use, defaults to the configured repository if there is only one',
    )
    mount_group.add_argument('--archive', help='Name of archive to mount (or ""latest"")')
    mount_group.add_argument(
        '--mount-point',
        metavar='PATH',
        dest='mount_point',
        help='Path where filesystem is to be mounted',
        required=True,
    )
    mount_group.add_argument(
        '--path',
        metavar='PATH',
        nargs='+',
        dest='paths',
        help='Paths to mount from archive, defaults to the entire archive',
    )
    mount_group.add_argument(
        '--foreground',
        dest='foreground',
        default=False,
        action='store_true',
        help='Stay in foreground until ctrl-C is pressed',
    )
    mount_group.add_argument('--options', dest='options', help='Extra Borg mount options')
    mount_group.add_argument('-h', '--help', action='help', help='Show this help message and exit')

    umount_parser = subparsers.add_parser(
        'umount',
        aliases=SUBPARSER_ALIASES['umount'],
        help='Unmount a FUSE filesystem that was mounted with ""borgmatic mount""',
        description='Unmount a mounted FUSE filesystem',
        add_help=False,
    )
    umount_group = umount_parser.add_argument_group('umount arguments')
    umount_group.add_argument(
        '--mount-point',
        metavar='PATH',
        dest='mount_point',
        help='Path of filesystem to unmount',
        required=True,
    )
    umount_group.add_argument('-h', '--help', action='help', help='Show this help message and exit')

    restore_parser = subparsers.add_parser(
        'restore',
        aliases=SUBPARSER_ALIASES['restore'],
        help='Restore database dumps from a named archive',
        description='Restore database dumps from a named archive. (To extract files instead, use ""borgmatic extract"".)',
        add_help=False,
    )
    restore_group = restore_parser.add_argument_group('restore arguments')
    restore_group.add_argument(
        '--repository',
        help='Path of repository to restore from, defaults to the configured repository if there is only one',
    )
    restore_group.add_argument(
        '--archive', help='Name of archive to restore from (or ""latest"")', required=True
    )
    restore_group.add_argument(
        '--database',
        metavar='NAME',
        nargs='+',
        dest='databases',
        help='Names of databases to restore from archive, defaults to all databases. Note that any databases to restore must be defined in borgmatic\'s configuration',
    )
    restore_group.add_argument(
        '-h', '--help', action='help', help='Show this help message and exit'
    )

    list_parser = subparsers.add_parser(
        'list',
        aliases=SUBPARSER_ALIASES['list'],
        help='List archives',
        description='List archives or the contents of an archive',
        add_help=False,
    )
    list_group = list_parser.add_argument_group('list arguments')
    list_group.add_argument(
        '--repository', help='Path of repository to list, defaults to the configured repositories',
    )
    list_group.add_argument('--archive', help='Name of archive to list (or ""latest"")')
    list_group.add_argument(
        '--path',
        metavar='PATH',
        nargs='+',
        dest='paths',
        help='Paths or patterns to list from a single selected archive (via ""--archive""), defaults to listing the entire archive',
    )
    list_group.add_argument(
        '--find',
        metavar='PATH',
        nargs='+',
        dest='find_paths',
        help='Partial paths or patterns to search for and list across multiple archives',
    )
    list_group.add_argument(
        '--short', default=False, action='store_true', help='Output only archive or path names'
    )
    list_group.add_argument('--format', help='Format for file listing')
    list_group.add_argument(
        '--json', default=False, action='store_true', help='Output results as JSON'
    )
    list_group.add_argument(
        '-P', '--prefix', help='Only list archive names starting with this prefix'
    )
    list_group.add_argument(
        '-a', '--glob-archives', metavar='GLOB', help='Only list archive names matching this glob'
    )
    list_group.add_argument(
        '--successful',
        default=True,
        action='store_true',
        help='Deprecated in favor of listing successful (non-checkpoint) backups by default in newer versions of Borg',
    )
    list_group.add_argument(
        '--sort-by', metavar='KEYS', help='Comma-separated list of sorting keys'
    )
    list_group.add_argument(
        '--first', metavar='N', help='List first N archives after other filters are applied'
    )
    list_group.add_argument(
        '--last', metavar='N', help='List last N archives after other filters are applied'
    )
    list_group.add_argument(
        '-e', '--exclude', metavar='PATTERN', help='Exclude paths matching the pattern'
    )
    list_group.add_argument(
        '--exclude-from', metavar='FILENAME', help='Exclude paths from exclude file, one per line'
    )
    list_group.add_argument('--pattern', help='Include or exclude paths matching a pattern')
    list_group.add_argument(
        '--patterns-from',
        metavar='FILENAME',
        help='Include or exclude paths matching patterns from pattern file, one per line',
    )
    list_group.add_argument('-h', '--help', action='help', help='Show this help message and exit')

    info_parser = subparsers.add_parser(
        'info',
        aliases=SUBPARSER_ALIASES['info'],
        help='Display summary information on archives',
        description='Display summary information on archives',
        add_help=False,
    )
    info_group = info_parser.add_argument_group('info arguments')
    info_group.add_argument(
        '--repository',
        help='Path of repository to show info for, defaults to the configured repository if there is only one',
    )
    info_group.add_argument('--archive', help='Name of archive to show info for (or ""latest"")')
    info_group.add_argument(
        '--json', dest='json', default=False, action='store_true', help='Output results as JSON'
    )
    info_group.add_argument(
        '-P', '--prefix', help='Only show info for archive names starting with this prefix'
    )
    info_group.add_argument(
        '-a',
        '--glob-archives',
        metavar='GLOB',
        help='Only show info for archive names matching this glob',
    )
    info_group.add_argument(
        '--sort-by', metavar='KEYS', help='Comma-separated list of sorting keys'
    )
    info_group.add_argument(
        '--first',
        metavar='N',
        help='Show info for first N archives after other filters are applied',
    )
    info_group.add_argument(
        '--last', metavar='N', help='Show info for last N archives after other filters are applied'
    )
    info_group.add_argument('-h', '--help', action='help', help='Show this help message and exit')

    borg_parser = subparsers.add_parser(
        'borg',
        aliases=SUBPARSER_ALIASES['borg'],
        help='Run an arbitrary Borg command',
        description='Run an arbitrary Borg command based on borgmatic\'s configuration',
        add_help=False,
    )
    borg_group = borg_parser.add_argument_group('borg arguments')
    borg_group.add_argument(
        '--repository',
        help='Path of repository to pass to Borg, defaults to the configured repositories',
    )
    borg_group.add_argument('--archive', help='Name of archive to pass to Borg (or ""latest"")')
    borg_group.add_argument(
        '--',
        metavar='OPTION',
        dest='options',
        nargs='+',
        help='Options to pass to Borg, command first (""create"", ""list"", etc). ""--"" is optional. To specify the repository or the archive, you must use --repository or --archive instead of providing them here.',
    )
    borg_group.add_argument('-h', '--help', action='help', help='Show this help message and exit')

    return top_level_parser, subparsers
"
"def paging(response, max_results):
    """"""Returns WAPI response page by page

    Args:
        response (list): WAPI response.
        max_results (int): Maximum number of objects to be returned in one page.
    Returns:
        Generator object with WAPI response split page by page.
    """"""
    i = 0
    while i < len(response):
        yield response[i:i + max_results]
        i = i + max_results
"
"def size_to_bytes(size: str) -> int:
    """"""Convert human readable file size to bytes.

    Resulting value is an approximation as input value is in most case rounded.

    Args:
        size: A string representing a human readable file size (eg: '500K')

    Returns:
        A decimal representation of file size

        Examples::

            >>> size_to_bytes(""500"")
            500
            >>> size_to_bytes(""1K"")
            1000
    """"""
    units = {
        ""K"": 1000,
        ""M"": 1000**2,
        ""G"": 1000**3,
        ""T"": 1000**4,
        ""P"": 1000**5,
        ""E"": 1000**6,
        ""Z"": 1000**7,
        ""Y"": 1000**8,
    }
    if size.endswith(tuple(units)):
        v, u = (size[:-1], size[-1])
        return int(v) * units[u]
    else:
        return int(size)
"
"def _dictsum(dicts):
    """"""
    Combine values of the dictionaries supplied by iterable dicts.

    >>> _dictsum([{'a': 1, 'b': 2}, {'a': 5, 'b': 0}])
    {'a': 6, 'b': 2}
    """"""
    it = iter(dicts)
    first = next(it).copy()
    for d in it:
        for k, v in d.items():
            first[k] += v
    return first
"
"def _replace_url_args(url, url_args):
    """"""Replace any custom string URL items with values in args""""""
    if url_args:
        for key, value in url_args.items():
            url = url.replace(f""{key}/"", f""{value}/"")
    return url
"
"def is_none_string(val: any) -> bool:
    """"""Check if a string represents a None value.""""""
    if not isinstance(val, str):
        return False

    return val.lower() == 'none'
"
"def parser_flags(parser):
    '''
    Given an argparse.ArgumentParser instance, return its argument flags in a space-separated
    string.
    '''
    return ' '.join(option for action in parser._actions for option in action.option_strings)
"
"def was_processed(processed, path_name, verbose):
    """"""
    Check if a file or directory has already been processed.

    To prevent recursion, expand the path name to an absolution path
    call this function with a set that will store all the entries and
    the entry to test. If the entry is already in the set, report the issue
    and return ``True``. Otherwise, add the entry to the set and return
    ``False`` to allow the path to be processed.

    Args:
        processed: Set to store processed pathnames
        path_name: Path to a directory or file
        verbose: True if verbose output is requested

    Returns:
        True if it's already in the set. False if not.
    """"""

    # Test for recursion
    if path_name in processed:
        if verbose:
            print('{} has already been processed'.format(path_name))
        return True

    # Mark this list as ""processed"" to prevent recursion
    if verbose:
        print('Processing {}.'.format(path_name))
    processed.add(path_name)
    return False
"
"def vertex3tuple(vertices):
    """"""return 3 points for each vertex of the polygon. This will include the vertex and the 2 points on both sides of the vertex::

        polygon with vertices ABCD
        Will return
        DAB, ABC, BCD, CDA -> returns 3tuples
        #A    B    C    D  -> of vertices
    """"""
    asvertex_list = []
    for i in range(len(vertices)):
        try:
            asvertex_list.append((vertices[i-1], vertices[i], vertices[i+1]))
        except IndexError as e:
           asvertex_list.append((vertices[i-1], vertices[i], vertices[0]))
    return asvertex_list
"
"def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:
    """"""
    Convert a number to a string, using the given alphabet.

    The output has the most significant digit first.
    """"""
    output = """"
    alpha_len = len(alphabet)
    while number:
        number, digit = divmod(number, alpha_len)
        output += alphabet[digit]
    if padding:
        remainder = max(padding - len(output), 0)
        output = output + alphabet[0] * remainder
    return output[::-1]
"
"def _replace_register(flow_params, register_number, register_value):
    """"""Replace value from flows to given register number

    'register_value' key in dictionary will be replaced by register number
    given by 'register_number'

    :param flow_params: Dictionary containing defined flows
    :param register_number: The number of register where value will be stored
    :param register_value: Key to be replaced by register number

    """"""
    try:
        reg_port = flow_params[register_value]
        del flow_params[register_value]
        flow_params['reg{:d}'.format(register_number)] = reg_port
    except KeyError:
        pass
    return flow_params # expose the observer to the test_module
"
"def replace_dots(value, arg):
    """"""Replaces all values of '.' to arg from the given string""""""
    return value.replace(""."", arg)
"
"def subclasses(cls):
    """"""Return all subclasses of a class, recursively""""""
    children = cls.__subclasses__()
    return set(children).union(
        set(grandchild for child in children for grandchild in subclasses(child))
    )
"
"def string_to_int(string: str, alphabet: List[str]) -> int:
    """"""
    Convert a string to a number, using the given alphabet.

    The input is assumed to have the most significant digit first.
    """"""
    number = 0
    alpha_len = len(alphabet)
    for char in string:
        number = number * alpha_len + alphabet.index(char)
    return number
"
"import requests
def get_repo_archive(url: str, destination_path: Path) -> Path:
    """"""
    Given an url and a destination path, retrieve and extract .tar.gz archive
    which contains 'desc' file for each package.
    Each .tar.gz archive corresponds to an Arch Linux repo ('core', 'extra', 'community').

    Args:
        url: url of the .tar.gz archive to download
        destination_path: the path on disk where to extract archive

    Returns:
        a directory Path where the archive has been extracted to.
    """"""
    res = requests.get(url)
    destination_path.parent.mkdir(parents=True, exist_ok=True)
    destination_path.write_bytes(res.content)

    extract_to = Path(str(destination_path).split("".tar.gz"")[0])
    tar = tarfile.open(destination_path)
    tar.extractall(path=extract_to)
    tar.close()

    return extract_to
"
"import os
def os_is_mac():
    """"""
    Checks if the os is macOS

    :return: True is macOS
    :rtype: bool
    """"""
    return platform.system() == ""Darwin""
"
"import re
def regex_dict(item):
    """"""
    Convert *.cpp keys to regex keys

    Given a dict where the keys are all filenames with wildcards, convert only
    the keys into equivalent regexes and leave the values intact.

    Example:

    rules = {
        '*.cpp':
            {'a': 'arf', 'b': 'bark', 'c': 'coo'},
        '*.h':
            {'h': 'help'}
    }
    regex_keys = regex_dict(rules)

    Args:
        item: dict to convert
    Returns:
        dict with keys converted to regexes
    """"""

    output = {}
    for key in item:
        output[re.compile(fnmatch.translate(key)).match] = item[key]
    return output
"
"import re
def unquote(name):
    """"""Remove quote from the given name.""""""
    assert isinstance(name, bytes)

    # This function just gives back the original text if it can decode it
    def unquoted_char(match):
        """"""For each ;000 return the corresponding byte.""""""
        if len(match.group()) != 4:
            return match.group
        try:
            return bytes([int(match.group()[1:])])
        except ValueError:
            return match.group

    # Remove quote using regex
    return re.sub(b"";[0-9]{3}"", unquoted_char, name, re.S)
"
"import re
def split(s, platform='this'):
    """"""Multi-platform variant of shlex.split() for command-line splitting.
    For use with subprocess, for argv injection etc. Using fast REGEX.

    platform: 'this' = auto from current platform;
              1 = POSIX;
              0 = Windows/CMD
              (other values reserved)
    """"""
    if platform == 'this':
        platform = (sys.platform != 'win32')
    if platform == 1:
        RE_CMD_LEX = r'''""((?:\\[""\\]|[^""])*)""|'([^']*)'|(\\.)|(&&?|\|\|?|\d?\>|[<])|([^\s'""\\&|<>]+)|(\s+)|(.)'''
    elif platform == 0:
        RE_CMD_LEX = r'''""((?:""""|\\[""\\]|[^""])*)""?()|(\\\\(?=\\*"")|\\"")|(&&?|\|\|?|\d?>|[<])|([^\s""&|<>]+)|(\s+)|(.)'''
    else:
        raise AssertionError('unkown platform %r' % platform)

    args = []
    accu = None   # collects pieces of one arg
    for qs, qss, esc, pipe, word, white, fail in re.findall(RE_CMD_LEX, s):
        if word:
            pass   # most frequent
        elif esc:
            word = esc[1]
        elif white or pipe:
            if accu is not None:
                args.append(accu)
            if pipe:
                args.append(pipe)
            accu = None
            continue
        elif fail:
            raise ValueError(""invalid or incomplete shell string"")
        elif qs:
            word = qs.replace('\\""', '""').replace('\\\\', '\\')
            if platform == 0:
                word = word.replace('""""', '""')
        else:
            word = qss   # may be even empty; must be last

        accu = (accu or '') + word

    if accu is not None:
        args.append(accu)

    return args
"
"import subprocess
def prepare_repository_from_archive(
    archive_path: str,
    filename: Optional[str] = None,
    tmp_path: Union[PosixPath, str] = ""/tmp"",
) -> str:
    """"""Given an existing archive_path, uncompress it.
    Returns a file repo url which can be used as origin url.

    This does not deal with the case where the archive passed along does not exist.
    """"""
    if not isinstance(tmp_path, str):
        tmp_path = str(tmp_path)
    # uncompress folder/repositories/dump for the loader to ingest
    subprocess.check_output([""tar"", ""xf"", archive_path, ""-C"", tmp_path])
    # build the origin url (or some derivative form)
    _fname = filename if filename else os.path.basename(archive_path)
    repo_url = f""file://{tmp_path}/{_fname}""
    return repo_url
"
"import subprocess
def addignored(ignored):
    ''' Use the git command to obtain the file names, turn it into a list, sort the list for only ignored files, return those files as a single string with each filename separated by a comma.'''
    fldr=subprocess.run([""git"", ""-C"", ignored, ""status"", ""-s"", ""--ignored""], capture_output=True, text=True).stdout.strip(""\n"")
    x = fldr.splitlines()
    sub = ""!""
    g = ([s for s in x if sub in s])
    i = [elem.replace(sub, '') for elem in g]
    t = "", "".join(i)
    return t
"
"import os
def match(filename):
    """"""
    Check if the filename is a type that this module supports

    Args:
        filename: Filename to match
    Returns:
        False if not a match, True if supported
    """"""

    base_name = os.path.basename(filename)
    base_name_lower = base_name.lower()
    return base_name_lower == 'doxyfile'
"
"import datetime
def parse_frequency(frequency):
    '''
    Given a frequency string with a number and a unit of time, return a corresponding
    datetime.timedelta instance or None if the frequency is None or ""always"".

    For instance, given ""3 weeks"", return datetime.timedelta(weeks=3)

    Raise ValueError if the given frequency cannot be parsed.
    '''
    if not frequency:
        return None

    frequency = frequency.strip().lower()

    if frequency == 'always':
        return None

    try:
        number, time_unit = frequency.split(' ')
        number = int(number)
    except ValueError:
        raise ValueError(f""Could not parse consistency check frequency '{frequency}'"")

    if not time_unit.endswith('s'):
        time_unit += 's'

    if time_unit == 'months':
        number *= 4
        time_unit = 'weeks'
    elif time_unit == 'years':
        number *= 365
        time_unit = 'days'

    try:
        return datetime.timedelta(**{time_unit: number})
    except TypeError:
        raise ValueError(f""Could not parse consistency check frequency '{frequency}'"")
"
"import socket
def is_local(host):
    """"""
    Checks if the host is the localhost

    :param host: The hostname or ip
    :return: True if the host is the localhost
    """"""
    return host in [""127.0.0.1"",
                    ""localhost"",
                    socket.gethostname(),
                    # just in case socket.gethostname() does not work  we also try the following:
                    platform.node(),
                    socket.gethostbyaddr(socket.gethostname())[0]
                    ]
"
"import re
def make_find_paths(find_paths):
    '''
    Given a sequence of path fragments or patterns as passed to `--find`, transform all path
    fragments into glob patterns. Pass through existing patterns untouched.

    For example, given find_paths of:

      ['foo.txt', 'pp:root/somedir']

    ... transform that into:

      ['sh:**/*foo.txt*/**', 'pp:root/somedir']
    '''

    return tuple(
        find_path
        if re.compile(r'([-!+RrPp] )|(\w\w:)').match(find_path)
        else f'sh:**/*{find_path}*/**'
        for find_path in find_paths
    )
"
"import os
def is_gitbash():
    """"""
    returns True if you run in a Windows gitbash

    :return: True if gitbash
    """"""
    try:
        exepath = os.environ['EXEPATH']
        return ""Git"" in exepath
    except:
        return False
"
"import os
def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):
    '''
    Given a target config filename and rendered config YAML, write it out to file. Create any
    containing directories as needed. But if the file already exists and overwrite is False,
    abort before writing anything.
    '''
    if not overwrite and os.path.exists(config_filename):
        return FileExistsError
        # raise FileExistsError(
        #     '{} already exists. Aborting. Use --overwrite to replace the file.'.format(
        #         config_filename
        #     )
        # )

    try:
        os.makedirs(os.path.dirname(config_filename), mode=0o700)
    except (FileExistsError, FileNotFoundError):
        pass

    with open(config_filename, 'w') as config_file:
        config_file.write(rendered_config)

    os.chmod(config_filename, mode)
    return rendered_config
"
"import textwrap
def oneline(script, seperator="" && ""):
    """"""
    converts a script to one line command.
    THis is useful to run a single ssh command and pass a one line script.

    :param script:
    :return:
    """"""
    return seperator.join(textwrap.dedent(script).strip().splitlines())
"
"import subprocess
def subprocess_run_helper(func, *args, timeout, extra_env=None):
    """"""
    Run a function in a sub-process.

    Parameters
    ----------
    func : function
        The function to be run.  It must be in a module that is importable.
    *args : str
        Any additional command line arguments to be passed in
        the first argument to ``subprocess.run``.
    extra_env : dict[str, str]
        Any additional environment variables to be set for the subprocess.
    """"""
    target = func.__name__
    module = func.__module__
    proc = subprocess.run(
        [sys.executable,
         ""-c"",
         f""from {module} import {target}; {target}()"",
         *args],
        env={**os.environ, ""SOURCE_DATE_EPOCH"": ""0"", **(extra_env or {})},
        timeout=timeout, check=True,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        universal_newlines=True)
    return proc
"
"import os
def _resolve_string(matcher):
    '''
    Get the value from environment given a matcher containing a name and an optional default value.
    If the variable is not defined in environment and no default value is provided, an Error is raised.
    '''
    name, default = matcher.group(""name""), matcher.group(""default"")
    out = os.getenv(name, default=default)
    if out is None:
        raise ValueError(""Cannot find variable ${name} in envivonment"".format(name=name))
    return out
"
"import urllib
def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:
    """"""Parse an image href into composite parts.

    :param image_href: href of an image
    :returns: a tuple of the form (image_id, netloc, use_ssl)
    :raises ValueError:

    """"""
    url = urllib.parse.urlparse(image_href)
    netloc = url.netloc
    image_id = url.path.split('/')[-1]
    use_ssl = (url.scheme == 'https')
    return (image_id, netloc, use_ssl)
"
"import os
def remove_ending_os_sep(input_list):
    """"""
    Iterate over a string list and remove trailing os seperator characters.

    Each string is tested if its length is greater than one and if the last
    character is the pathname seperator. If so, the pathname seperator character
    is removed.

    Args:
        input_list: list of strings

    Returns:
        Processed list of strings

    Raises:
        TypeError
    """"""

    # Input could be None, so test for that case
    if input_list is None:
        return []

    return [item[:-1] if len(item) >= 2 and item.endswith(os.sep)
            else item for item in input_list]
"
"import re
def get_pattern(pattern, strip=True):
    """"""
    This method converts the given string to regex pattern
    """"""
    if type(pattern) == re.Pattern:
        return pattern

    if strip and type(pattern) == str:
        pattern = pattern.strip()

    return re.compile(pattern)
"
"import subprocess
def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):
    """"""Call the given command(s).""""""
    assert isinstance(commands, list)
    process = None

    popen_kwargs = {}
    if sys.platform == ""win32"":
        # This hides the console window if pythonw.exe is used
        startupinfo = subprocess.STARTUPINFO()
        startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
        popen_kwargs[""startupinfo""] = startupinfo

    for command in commands:
        try:
            dispcmd = str([command] + args)
            # remember shell=False, so use git.cmd on windows, not just git
            process = subprocess.Popen(
                [command] + args,
                cwd=cwd,
                env=env,
                stdout=subprocess.PIPE,
                stderr=(subprocess.PIPE if hide_stderr else None),
                **popen_kwargs
            )
            break
        except OSError:
            e = sys.exc_info()[1]
            if e.errno == errno.ENOENT:
                continue
            if verbose:
                print(""unable to run %s"" % dispcmd)
                print(e)
            return None, None
    else:
        if verbose:
            print(""unable to find command, tried %s"" % (commands,))
        return None, None
    stdout = process.communicate()[0].strip().decode()
    if process.returncode != 0:
        if verbose:
            print(""unable to run %s (error)"" % dispcmd)
            print(""stdout was %s"" % stdout)
        return None, process.returncode
    return stdout, process.returncode
"
"import ipaddress
def is_ipv4(target):
    """""" Test if IPv4 address or not
    """"""
    try:
       chk = ipaddress.IPv4Address(target)
       return True
    except ipaddress.AddressValueError:
       return False
"
"import rdflib
def find_roots(
    graph: ""Graph"", prop: ""URIRef"", roots: Optional[Set[""Node""]] = None
) -> Set[""Node""]:
    """"""
    Find the roots in some sort of transitive hierarchy.

    find_roots(graph, rdflib.RDFS.subClassOf)
    will return a set of all roots of the sub-class hierarchy

    Assumes triple of the form (child, prop, parent), i.e. the direction of
    RDFS.subClassOf or SKOS.broader

    """"""

    non_roots: Set[Node] = set()
    if roots is None:
        roots = set()
    for x, y in graph.subject_objects(prop):
        non_roots.add(x)
        if x in roots:
            roots.remove(x)
        if y not in non_roots:
            roots.add(y)
    return roots
"
"import yaml
def _dump_string(obj, dumper=None):
    """"""Dump to a py2-unicode or py3-string""""""
    if PY3:
        return yaml.dump(obj, Dumper=dumper)
    else:
        return yaml.dump(obj, Dumper=dumper, encoding=None)
"
"import os,logging
def build_app_logger(name='app', logfile='app.log', debug=True):
    """"""
    General purpose application logger. Useful mainly for debugging
    """"""
    # level = logging.DEBUG if settings.DEBUG else logging.INFO
    level = logging.INFO
    
    logdir = './logs'  # TODO: move this to settings
    if not os.path.exists(logdir):
        os.mkdir(logdir)
    logpath = os.path.join(logdir, logfile)
    maxBytes = 1024 * 1024 * 10
    handler = RotatingFileHandler(logpath, maxBytes=maxBytes, backupCount=100)
    handler.setLevel(level)
    formatter = logging.Formatter('[%(levelname)s] %(asctime)s: %(message)s')
    handler.setFormatter(formatter)
    logger = logging.getLogger(name)
    logger.addHandler(handler)
    logger.setLevel(level)
    return logger
"
"import numpy as np
def make_array(shape, dtype=np.dtype(""float32"")):
    """"""
    Function to create an array with shape and dtype.

    Parameters
    ----------
    shape : tuple
        shape of the array to create
    dtype : `numpy.dtype`
        data-type of the array to create
    """"""
    return np.zeros(shape, dtype=dtype)
"
"import numpy as np
def gaussian(x):
    """"""
    Gaussian centered around 0.2 with a sigma of 0.1.
    """"""
    mu = 0.2
    sigma = 0.1
    return np.exp(-(x-mu)**2/sigma**2)
"
"import logging
def load_configurations(config_filenames, overrides=None, resolve_env=True):
    '''
    Given a sequence of configuration filenames, load and validate each configuration file. Return
    the results as a tuple of: dict of configuration filename to corresponding parsed configuration,
    and sequence of logging.LogRecord instances containing any parse errors.
    '''
    # Dict mapping from config filename to corresponding parsed config dict.
    configs = collections.OrderedDict()
    logs = []

    # Parse and load each configuration file.
    for config_filename in config_filenames:
        try:
            configs[config_filename] = validate.parse_configuration(
                config_filename, validate.schema_filename(), overrides, resolve_env
            )
        except PermissionError:
            logs.extend(
                [
                    logging.makeLogRecord(
                        dict(
                            levelno=logging.WARNING,
                            levelname='WARNING',
                            msg='{}: Insufficient permissions to read configuration file'.format(
                                config_filename
                            ),
                        )
                    ),
                ]
            )
        except (ValueError, OSError, validate.Validation_error) as error:
            logs.extend(
                [
                    logging.makeLogRecord(
                        dict(
                            levelno=logging.CRITICAL,
                            levelname='CRITICAL',
                            msg='{}: Error parsing configuration file'.format(config_filename),
                        )
                    ),
                    logging.makeLogRecord(
                        dict(levelno=logging.CRITICAL, levelname='CRITICAL', msg=error)
                    ),
                ]
            )

    return (configs, logs)
"
"import numpy
def force_string(obj):
    """"""
    This function returns the bytes object corresponding to ``obj``
    in case it is a string using UTF-8. 
    """"""
    if isinstance(obj,numpy.bytes_)==True or isinstance(obj,bytes)==True:
        return obj.decode('utf-8')
    return obj
"
"    @classmethod
    def from_ticks(cls, ticks, tz=None):
        """"""Create a time from ticks (nanoseconds since midnight).

        :param ticks: nanoseconds since midnight
        :type ticks: int
        :param tz: optional timezone
        :type tz: datetime.tzinfo

        :rtype: Time

        :raises ValueError: if ticks is out of bounds
            (0 <= ticks < 86400000000000)
        """"""
        if not isinstance(ticks, int):
            raise TypeError(""Ticks must be int"")
        if 0 <= ticks < 86400000000000:
            second, nanosecond = divmod(ticks, NANO_SECONDS)
            minute, second = divmod(second, 60)
            hour, minute = divmod(minute, 60)
            return cls.__new(ticks, hour, minute, second, nanosecond, tz)
        raise ValueError(""Ticks out of range (0..86400000000000)"")
"
"    @classmethod
    def protocol_handlers(cls, protocol_version=None):
        """""" Return a dictionary of available Bolt protocol handlers,
        keyed by version tuple. If an explicit protocol version is
        provided, the dictionary will contain either zero or one items,
        depending on whether that version is supported. If no protocol
        version is provided, all available versions will be returned.

        :param protocol_version: tuple identifying a specific protocol
            version (e.g. (3, 5)) or None
        :return: dictionary of version tuple to handler class for all
            relevant and supported protocol versions
        :raise TypeError: if protocol version is not passed in a tuple
        """"""

        # Carry out Bolt subclass imports locally to avoid circular dependency issues.
        from ._bolt3 import AsyncBolt3
        from ._bolt4 import (
            AsyncBolt4x1,
            AsyncBolt4x2,
            AsyncBolt4x3,
            AsyncBolt4x4,
        )
        from ._bolt5 import AsyncBolt5x0

        handlers = {
            AsyncBolt3.PROTOCOL_VERSION: AsyncBolt3,
            # 4.0 unsupported because no space left in the handshake
            AsyncBolt4x1.PROTOCOL_VERSION: AsyncBolt4x1,
            AsyncBolt4x2.PROTOCOL_VERSION: AsyncBolt4x2,
            AsyncBolt4x3.PROTOCOL_VERSION: AsyncBolt4x3,
            AsyncBolt4x4.PROTOCOL_VERSION: AsyncBolt4x4,
            AsyncBolt5x0.PROTOCOL_VERSION: AsyncBolt5x0,
        }

        if protocol_version is None:
            return handlers

        if not isinstance(protocol_version, tuple):
            raise TypeError(""Protocol version must be specified as a tuple"")

        if protocol_version in handlers:
            return {protocol_version: handlers[protocol_version]}

        return {}
"
"    @classmethod
    def from_raw_values(cls, values):
        """"""Create a Bookmarks object from a list of raw bookmark string values.

        You should not need to use this method unless you want to deserialize
        bookmarks.

        :param values: ASCII string values (raw bookmarks)
        :type values: Iterable[str]
        """"""
        obj = cls()
        bookmarks = []
        for value in values:
            if not isinstance(value, str):
                raise TypeError(""Raw bookmark values must be str. ""
                                ""Found {}"".format(type(value)))
            try:
                value.encode(""ascii"")
            except UnicodeEncodeError as e:
                raise ValueError(f""The value {value} is not ASCII"") from e
            bookmarks.append(value)
        obj._raw_values = frozenset(bookmarks)
        return obj
"
"def _get_seq_with_type(seq, bufsize=None):
    """"""Return a (sequence, type) pair.
    Sequence is derived from *seq*
    (or is *seq*, if that is of a sequence type).
    """"""
    seq_type = """"
    if isinstance(seq, source.Source):
        seq_type = ""source""
    elif isinstance(seq, fill_compute_seq.FillComputeSeq):
        seq_type = ""fill_compute""
    elif isinstance(seq, fill_request_seq.FillRequestSeq):
        seq_type = ""fill_request""
    elif isinstance(seq, sequence.Sequence):
        seq_type = ""sequence""

    if seq_type:
        # append later
        pass
    ## If no explicit type is given, check seq's methods
    elif ct.is_fill_compute_seq(seq):
        seq_type = ""fill_compute""
        if not ct.is_fill_compute_el(seq):
            seq = fill_compute_seq.FillComputeSeq(*seq)
    elif ct.is_fill_request_seq(seq):
        seq_type = ""fill_request""
        if not ct.is_fill_request_el(seq):
            seq = fill_request_seq.FillRequestSeq(
                *seq, bufsize=bufsize,
                # if we have a FillRequest element inside,
                # it decides itself when to reset.
                reset=False,
                # todo: change the interface, because
                # no difference with buffer_output: we fill
                # without a buffer
                buffer_input=True
            )
    # Source is not checked,
    # because it must be Source explicitly.
    else:
        try:
            if isinstance(seq, tuple):
                seq = sequence.Sequence(*seq)
            else:
                seq = sequence.Sequence(seq)
        except exceptions.LenaTypeError:
            raise exceptions.LenaTypeError(
                ""unknown argument type. Must be a ""
                ""FillComputeSeq, FillRequestSeq or Source, ""
                ""{} provided"".format(seq)
            )
        else:
            seq_type = ""sequence""
    return (seq, seq_type)
"
"    def scale(self, other=None, recompute=False):
        """"""Compute or set scale (integral of the histogram).

        If *other* is ``None``, return scale of this histogram.
        If its scale was not computed before,
        it is computed and stored for subsequent use
        (unless explicitly asked to *recompute*).
        Note that after changing (filling) the histogram
        one must explicitly recompute the scale
        if it was computed before.

        If a float *other* is provided, rescale self to *other*.

        Histograms with scale equal to zero can't be rescaled.
        :exc:`.LenaValueError` is raised if one tries to do that.
        """"""
        # see graph.scale comments why this is called simply ""scale""
        # (not set_scale, get_scale, etc.)
        if other is None:
            # return scale
            if self._scale is None or recompute:
                self._scale = hf.integral(
                    *hf.unify_1_md(self.bins, self.edges)
                )
            return self._scale
        else:
            # rescale from other
            scale = self.scale()
            if scale == 0:
                raise lena.core.LenaValueError(
                    ""can not rescale histogram with zero scale""
                )
            self.bins = lena.math.md_map(lambda binc: binc*float(other) / scale,
                                         self.bins)
            self._scale = other
            return None
"
"    def scale(self, other=None):
        """"""Get or set the scale of the graph.

        If *other* is ``None``, return the scale of this graph.

        If a numeric *other* is provided, rescale to that value.
        If the graph has unknown or zero scale,
        rescaling that will raise :exc:`~.LenaValueError`.

        To get meaningful results, graph's fields are used.
        Only the last coordinate is rescaled.
        For example, if the graph has *x* and *y* coordinates,
        then *y* will be rescaled, and for a 3-dimensional graph
        *z* will be rescaled.
        All errors are rescaled together with their coordinate.
        """"""
        # this method is called scale() for uniformity with histograms
        # And this looks really good: explicit for computations
        # (not a subtle graph.scale, like a constant field (which is,
        #  however, the case in graph - but not in other structures))
        # and easy to remember (set_scale? rescale? change_scale_to?..)

        # We modify the graph in place,
        # because that would be redundant (not optimal)
        # to create a new graph
        # if we only want to change the scale of the existing one.

        if other is None:
            return self._scale

        if not self._scale:
            raise lena.core.LenaValueError(
                ""can't rescale a graph with zero or unknown scale""
            )

        last_coord_ind = self.dim - 1
        last_coord_name = self.field_names[last_coord_ind]

        last_coord_indices = ([last_coord_ind] +
                self._get_err_indices(last_coord_name)
        )

        # In Python 2 3/2 is 1, so we want to be safe;
        # the downside is that integer-valued graphs
        # will become floating, but that is doubtfully an issue.
        # Remove when/if dropping support for Python 2.
        rescale = float(other) / self._scale

        mul = operator.mul
        partial = functools.partial

        # a version with lambda is about 50% slower:
        # timeit.timeit('[*map(lambda val: val*2, vals)]', \
        #     setup='vals = list(range(45)); from operator import mul; \
        #     from functools import partial')
        # 3.159
        # same setup for
        # timeit.timeit('[*map(partial(mul, 2), vals)]',...):
        # 2.075
        # 
        # [*map(...)] is very slightly faster than list(map(...)),
        # but it's unavailable in Python 2 (and anyway less readable).

        # rescale arrays of values and errors
        for ind, arr in enumerate(self.coords):
            if ind in last_coord_indices:
                # Python lists are faster than arrays,
                # https://stackoverflow.com/a/62399645/952234
                # (because each time taking a value from an array
                #  creates a Python object)
                self.coords[ind] = list(map(partial(mul, rescale),
                                            arr))

        self._scale = other

        # as suggested in PEP 8
        return None
"
"def hist_to_graph(hist, make_value=None, get_coordinate=""left"",
                  field_names=(""x"", ""y""), scale=None):
    """"""Convert a :class:`.histogram` to a :class:`.graph`.

    *make_value* is a function to set the value of a graph's point.
    By default it is bin content.
    *make_value* accepts a single value (bin content) without context.

    This option could be used to create graph's error bars.
    For example, to create a graph with errors
    from a histogram where bins contain
    a named tuple with fields *mean*, *mean_error* and a context
    one could use

    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error)

    *get_coordinate* defines what the coordinate
    of a graph point created from a histogram bin will be.
    It can be ""left"" (default), ""right"" and ""middle"".

    *field_names* set field names of the graph. Their number
    must be the same as the dimension of the result.
    For a *make_value* above they would be
    *(""x"", ""y_mean"", ""y_mean_error"")*.

    *scale* becomes the graph's scale (unknown by default).
    If it is ``True``, it uses the histogram scale.

    *hist* must contain only numeric bins (without context)
    or *make_value* must remove context when creating a numeric graph.

    Return the resulting graph.
    """"""
    ## Could have allowed get_coordinate to be callable
    # (for generality), but 1) first find a use case,
    # 2) histogram bins could be adjusted in the first place.
    # -- don't understand 2.
    if get_coordinate == ""left"":
        get_coord = lambda edges: tuple(coord[0] for coord in edges)
    elif get_coordinate == ""right"":
        get_coord = lambda edges: tuple(coord[1] for coord in edges)
    # *middle* between the two edges, not the *center* of the bin
    # as a whole (because the graph corresponds to a point)
    elif get_coordinate == ""middle"":
        get_coord = lambda edges: tuple(0.5*(coord[0] + coord[1])
                                        for coord in edges)
    else:
        raise lena.core.LenaValueError(
            'get_coordinate must be one of ""left"", ""right"" or ""middle""; '
            '""{}"" provided'.format(get_coordinate)
        )

    # todo: make_value may be bad design.
    # Maybe allow to change the graph in the sequence.
    # However, make_value allows not to recreate a graph
    # or its coordinates (if that is not needed).

    if isinstance(field_names, str):
        # copied from graph.__init__
        field_names = tuple(re.findall(r'[^,\s]+', field_names))
    elif not isinstance(field_names, tuple):
        raise lena.core.LenaTypeError(
            ""field_names must be a string or a tuple""
        )
    coords = [[] for _ in field_names]

    chain = itertools.chain

    if scale is True:
        scale = hist.scale()

    for value, edges in iter_bins_with_edges(hist.bins, hist.edges):
        coord = get_coord(edges)

        # Since we never use contexts here, it will be optimal
        # to ignore them completely (remove them elsewhere).
        # bin_value = lena.flow.get_data(value)
        bin_value = value

        if make_value is None:
            graph_value = bin_value
        else:
            graph_value = make_value(bin_value)

        # for iteration below
        if not hasattr(graph_value, ""__iter__""):
            graph_value = (graph_value,)

        # add each coordinate to respective array
        for arr, coord_ in zip(coords, chain(coord, graph_value)):
            arr.append(coord_)

    return _graph(coords, field_names=field_names, scale=scale)
"
"def _verify(iface, candidate, tentative=False, vtype=None):
    """"""
    Verify that *candidate* might correctly provide *iface*.

    This involves:

    - Making sure the candidate claims that it provides the
      interface using ``iface.providedBy`` (unless *tentative* is `True`,
      in which case this step is skipped). This means that the candidate's class
      declares that it `implements <zope.interface.implementer>` the interface,
      or the candidate itself declares that it `provides <zope.interface.provider>`
      the interface

    - Making sure the candidate defines all the necessary methods

    - Making sure the methods have the correct signature (to the
      extent possible)

    - Making sure the candidate defines all the necessary attributes

    :return bool: Returns a true value if everything that could be
       checked passed.
    :raises zope.interface.Invalid: If any of the previous
       conditions does not hold.

    .. versionchanged:: 5.0
        If multiple methods or attributes are invalid, all such errors
        are collected and reported. Previously, only the first error was reported.
        As a special case, if only one such error is present, it is raised
        alone, like before.
    """"""

    if vtype == 'c':
        tester = iface.implementedBy
    else:
        tester = iface.providedBy

    excs = []
    if not tentative and not tester(candidate):
        excs.append(DoesNotImplement(iface, candidate))

    for name, desc in iface.namesAndDescriptions(all=True):
        try:
            _verify_element(iface, name, desc, candidate, vtype)
        except Invalid as e:
            excs.append(e)

    if excs:
        if len(excs) == 1:
            raise excs[0]
        raise MultipleInvalid(iface, candidate, excs)

    return True
"
"def verifyObject(iface, candidate, tentative=False):
    return _verify(iface, candidate, tentative, vtype='o')
"
"def verifyClass(iface, candidate, tentative=False):
    """"""
    Verify that the *candidate* might correctly provide *iface*.
    """"""
    return _verify(iface, candidate, tentative, vtype='c')
"
"def determineMetaclass(bases, explicit_mc=None):
    """"""Determine metaclass from 1+ bases and optional explicit __metaclass__""""""

    meta = [getattr(b,'__class__',type(b)) for b in bases]

    if explicit_mc is not None:
        # The explicit metaclass needs to be verified for compatibility
        # as well, and allowed to resolve the incompatible bases, if any
        meta.append(explicit_mc)

    if len(meta)==1:
        # easy case
        return meta[0]

    candidates = minimalBases(meta) # minimal set of metaclasses

    if not candidates: # pragma: no cover
        # they're all ""classic"" classes
        assert(not __python3) # This should not happen under Python 3
        return ClassType

    elif len(candidates)>1:
        # We could auto-combine, but for now we won't...
        raise TypeError(""Incompatible metatypes"",bases)

    # Just one, return it
    return candidates[0]
"
"    def pop(self, key, default=__marker):
        if key in self:
            value = self[key]
            del self[key]
        elif default is self.__marker:
            raise KeyError(key)
        else:
            value = default
        return value
"
"    def popitem(self):
        """"""Remove and return the `(key, value)` pair least frequently used.""""""
        try:
            (key, _), = self.__counter.most_common(1)
        except ValueError:
            raise KeyError('%s is empty' % type(self).__name__) from None
        else:
            return (key, self.pop(key))
"
"    def popitem(self):
        """"""Remove and return the `(key, value)` pair least recently used.""""""
        try:
            key = next(iter(self.__order))
        except StopIteration:
            raise KeyError('%s is empty' % type(self).__name__) from None
        else:
            return (key, self.pop(key))
"
"    def popitem(self):
        """"""Remove and return the `(key, value)` pair most recently used.""""""
        try:
            key = next(iter(self.__order))
        except StopIteration:
            raise KeyError('%s is empty' % type(self).__name__) from None
        else:
            return (key, self.pop(key))
"
"    def popitem(self):
        """"""Remove and return a random `(key, value)` pair.""""""
        try:
            key = self.__choice(list(self))
        except IndexError:
            raise KeyError('%s is empty' % type(self).__name__) from None
        else:
            return (key, self.pop(key))
"
"	def _create_in_regex(self) -> Pattern:
		""""""
		Create the in-style parameter regular expression.

		Returns the in-style parameter regular expression (:class:`re.Pattern`).
		""""""
		regex_parts = []

		if self._in_obj.escape_char != ""%"" and self._out_obj.escape_char == ""%"":
			regex_parts.append(""(?P<out_percent>%)"")

		if self._escape_char:
			# Escaping is enabled.
			escape = self._in_obj.escape_regex.format(char=re.escape(self._escape_char))
			regex_parts.append(escape)

		regex_parts.append(self._in_obj.param_regex)

		return re.compile(""|"".join(regex_parts))
"
"	def _create_converter(self) -> _converting._Converter:
		""""""
		Create the parameter style converter.

		Returns the parameter style converter (:class:`._converting._Converter`).
		""""""
		assert self._in_regex is not None, self._in_regex
		assert self._out_obj is not None, self._out_obj

		# Determine converter class.
		converter_class: Type[_converting._Converter]
		if isinstance(self._in_obj, _styles._NamedStyle):
			if isinstance(self._out_obj, _styles._NamedStyle):
				converter_class = _converting._NamedToNamedConverter
			elif isinstance(self._out_obj, _styles._NumericStyle):
				converter_class = _converting._NamedToNumericConverter
			elif isinstance(self._out_obj, _styles._OrdinalStyle):
				converter_class = _converting._NamedToOrdinalConverter
			else:
				raise TypeError(""out_style:{!r} maps to an unexpected type: {!r}"".format(self._out_style, self._out_obj))

		elif isinstance(self._in_obj, _styles._NumericStyle):
			if isinstance(self._out_obj, _styles._NamedStyle):
				converter_class = _converting._NumericToNamedConverter
			elif isinstance(self._out_obj, _styles._NumericStyle):
				converter_class = _converting._NumericToNumericConverter
			elif isinstance(self._out_obj, _styles._OrdinalStyle):
				converter_class = _converting._NumericToOrdinalConverter
			else:
				raise TypeError(""out_style:{!r} maps to an unexpected type: {!r}"".format(self._out_style, self._out_obj))

		elif isinstance(self._in_obj, _styles._OrdinalStyle):
			if isinstance(self._out_obj, _styles._NamedStyle):
				converter_class = _converting._OrdinalToNamedConverter
			elif isinstance(self._out_obj, _styles._NumericStyle):
				converter_class = _converting._OrdinalToNumericConverter
			elif isinstance(self._out_obj, _styles._OrdinalStyle):
				converter_class = _converting._OrdinalToOrdinalConverter
			else:
				raise TypeError(""out_style:{!r} maps to an unexpected type: {!r}"".format(self._out_style, self._out_obj))

		else:
			raise TypeError(""in_style:{!r} maps to an unexpected type: {!r}"".format(self._in_style, self._in_obj))

		# Create converter.
		converter = converter_class(
			escape_char=self._escape_char,
			expand_tuples=self._expand_tuples,
			in_regex=self._in_regex,
			in_style=self._in_obj,
			out_style=self._out_obj,
		)
		return converter
"
"    @_takes_ascii
    def isoparse(self, dt_str):
        """"""
        Parse an ISO-8601 datetime string into a :class:`datetime.datetime`.

        An ISO-8601 datetime string consists of a date portion, followed
        optionally by a time portion - the date and time portions are separated
        by a single character separator, which is ``T`` in the official
        standard. Incomplete date formats (such as ``YYYY-MM``) may *not* be
        combined with a time portion.

        Supported date formats are:

        Common:

        - ``YYYY``
        - ``YYYY-MM`` or ``YYYYMM``
        - ``YYYY-MM-DD`` or ``YYYYMMDD``

        Uncommon:

        - ``YYYY-Www`` or ``YYYYWww`` - ISO week (day defaults to 0)
        - ``YYYY-Www-D`` or ``YYYYWwwD`` - ISO week and day

        The ISO week and day numbering follows the same logic as
        :func:`datetime.date.isocalendar`.

        Supported time formats are:

        - ``hh``
        - ``hh:mm`` or ``hhmm``
        - ``hh:mm:ss`` or ``hhmmss``
        - ``hh:mm:ss.ssssss`` (Up to 6 sub-second digits)

        Midnight is a special case for `hh`, as the standard supports both
        00:00 and 24:00 as a representation. The decimal separator can be
        either a dot or a comma.


        .. caution::

            Support for fractional components other than seconds is part of the
            ISO-8601 standard, but is not currently implemented in this parser.

        Supported time zone offset formats are:

        - `Z` (UTC)
        - `±HH:MM`
        - `±HHMM`
        - `±HH`

        Offsets will be represented as :class:`dateutil.tz.tzoffset` objects,
        with the exception of UTC, which will be represented as
        :class:`dateutil.tz.tzutc`. Time zone offsets equivalent to UTC (such
        as `+00:00`) will also be represented as :class:`dateutil.tz.tzutc`.

        :param dt_str:
            A string or stream containing only an ISO-8601 datetime string

        :return:
            Returns a :class:`datetime.datetime` representing the string.
            Unspecified components default to their lowest value.

        .. warning::

            As of version 2.7.0, the strictness of the parser should not be
            considered a stable part of the contract. Any valid ISO-8601 string
            that parses correctly with the default settings will continue to
            parse correctly in future versions, but invalid strings that
            currently fail (e.g. ``2017-01-01T00:00+00:00:00``) are not
            guaranteed to continue failing in future versions if they encode
            a valid date.

        .. versionadded:: 2.7.0
        """"""
        components, pos = self._parse_isodate(dt_str)

        if len(dt_str) > pos:
            if self._sep is None or dt_str[pos:pos + 1] == self._sep:
                components += self._parse_isotime(dt_str[pos + 1:])
            else:
                raise ValueError('String contains unknown ISO components')

        if len(components) > 3 and components[3] == 24:
            components[3] = 0
            return datetime(*components) + timedelta(days=1)

        return datetime(*components)
"
"    def parse(self, timestr, default=None,
              ignoretz=False, tzinfos=None, **kwargs):
        """"""
        Parse the date/time string into a :class:`datetime.datetime` object.

        :param timestr:
            Any date/time string using the supported formats.

        :param default:
            The default datetime object, if this is a datetime object and not
            ``None``, elements specified in ``timestr`` replace elements in the
            default object.

        :param ignoretz:
            If set ``True``, time zones in parsed strings are ignored and a
            naive :class:`datetime.datetime` object is returned.

        :param tzinfos:
            Additional time zone names / aliases which may be present in the
            string. This argument maps time zone names (and optionally offsets
            from those time zones) to time zones. This parameter can be a
            dictionary with timezone aliases mapping time zone names to time
            zones or a function taking two parameters (``tzname`` and
            ``tzoffset``) and returning a time zone.

            The timezones to which the names are mapped can be an integer
            offset from UTC in seconds or a :class:`tzinfo` object.

            .. doctest::
               :options: +NORMALIZE_WHITESPACE

                >>> from dateutil.parser import parse
                >>> from dateutil.tz import gettz
                >>> tzinfos = {""BRST"": -7200, ""CST"": gettz(""America/Chicago"")}
                >>> parse(""2012-01-19 17:21:00 BRST"", tzinfos=tzinfos)
                datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u'BRST', -7200))
                >>> parse(""2012-01-19 17:21:00 CST"", tzinfos=tzinfos)
                datetime.datetime(2012, 1, 19, 17, 21,
                                  tzinfo=tzfile('/usr/share/zoneinfo/America/Chicago'))

            This parameter is ignored if ``ignoretz`` is set.

        :param \\*\\*kwargs:
            Keyword arguments as passed to ``_parse()``.

        :return:
            Returns a :class:`datetime.datetime` object or, if the
            ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the
            first element being a :class:`datetime.datetime` object, the second
            a tuple containing the fuzzy tokens.

        :raises ParserError:
            Raised for invalid or unknown string format, if the provided
            :class:`tzinfo` is not in a valid format, or if an invalid date
            would be created.

        :raises TypeError:
            Raised for non-string or character stream input.

        :raises OverflowError:
            Raised if the parsed date exceeds the largest valid C integer on
            your system.
        """"""

        if default is None:
            default = datetime.datetime.now().replace(hour=0, minute=0,
                                                      second=0, microsecond=0)

        res, skipped_tokens = self._parse(timestr, **kwargs)

        if res is None:
            raise ParserError(""Unknown string format: %s"", timestr)

        if len(res) == 0:
            raise ParserError(""String does not contain a date: %s"", timestr)

        try:
            ret = self._build_naive(res, default)
        except ValueError as e:
            six.raise_from(ParserError(e.args[0] + "": %s"", timestr), e)

        if not ignoretz:
            ret = self._build_tzaware(ret, res, tzinfos)

        if kwargs.get('fuzzy_with_tokens', False):
            return ret, skipped_tokens
        else:
            return ret
"
"    @_validate_fromutc_inputs
    def fromutc(self, dt):
        """"""
        Given a timezone-aware datetime in a given timezone, calculates a
        timezone-aware datetime in a new timezone.

        Since this is the one time that we *know* we have an unambiguous
        datetime object, we take this opportunity to determine whether the
        datetime is ambiguous and in a ""fold"" state (e.g. if it's the first
        occurrence, chronologically, of the ambiguous datetime).

        :param dt:
            A timezone-aware :class:`datetime.datetime` object.
        """"""
        dt_wall = self._fromutc(dt)

        # Calculate the fold status given the two datetimes.
        _fold = self._fold_status(dt, dt_wall)

        # Set the default fold value for ambiguous dates
        return enfold(dt_wall, fold=_fold)
"
"def default_tzinfo(dt, tzinfo):
    """"""
    Sets the ``tzinfo`` parameter on naive datetimes only

    This is useful for example when you are provided a datetime that may have
    either an implicit or explicit time zone, such as when parsing a time zone
    string.

    .. doctest::

        >>> from dateutil.tz import tzoffset
        >>> from dateutil.parser import parse
        >>> from dateutil.utils import default_tzinfo
        >>> dflt_tz = tzoffset(""EST"", -18000)
        >>> print(default_tzinfo(parse('2014-01-01 12:30 UTC'), dflt_tz))
        2014-01-01 12:30:00+00:00
        >>> print(default_tzinfo(parse('2014-01-01 12:30'), dflt_tz))
        2014-01-01 12:30:00-05:00

    :param dt:
        The datetime on which to replace the time zone

    :param tzinfo:
        The :py:class:`datetime.tzinfo` subclass instance to assign to
        ``dt`` if (and only if) it is naive.

    :return:
        Returns an aware :py:class:`datetime.datetime`.
    """"""
    if dt.tzinfo is not None:
        return dt
    else:
        return dt.replace(tzinfo=tzinfo)
"
"    def set_cut_chars(self, before: bytes, after: bytes) -> None:
        """"""Set the bytes used to delimit slice points.

        Args:
            before: Split file before these delimiters.
            after: Split file after these delimiters.
        """"""
        self._cutter = re.compile(
            b""[""
            + before
            + b""]?""
            + b""[^""
            + before
            + after
            + b""]*""
            + b""(?:[""
            + after
            + b""]|$|(?=[""
            + before
            + b""]))""
        )
"
"def identify_request(request: RequestType):
    """"""Try to identify whether this is a Diaspora request.

    Try first public message. Then private message. The check if this is a legacy payload.
    """"""
    # Private encrypted JSON payload
    try:
        data = json.loads(decode_if_bytes(request.body))
        if ""encrypted_magic_envelope"" in data:
            return True
    except Exception:
        pass
    # Public XML payload
    try:
        xml = etree.fromstring(encode_if_text(request.body))
        if xml.tag == MAGIC_ENV_TAG:
            return True
    except Exception:
        pass
    return False
"
"def identify_request(request: RequestType) -> bool:
    """"""
    Try to identify whether this is a Matrix request
    """"""
    # noinspection PyBroadException
    try:
        data = json.loads(decode_if_bytes(request.body))
        if ""events"" in data:
            return True
    except Exception:
        pass
    return False
"
"def format_dt(dt):
    """"""
    Format a datetime in the way that D* nodes expect.
    """"""
    return ensure_timezone(dt).astimezone(tzutc()).strftime(
        '%Y-%m-%dT%H:%M:%SZ'
    )
"
"def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:
    """"""Find tags in text.

    Tries to ignore tags inside code blocks.

    Optionally, if passed a ""replacer"", will also replace the tag word with the result
    of the replacer function called with the tag word.

    Returns a set of tags and the original or replaced text.
    """"""
    found_tags = set()
    # <br> and <p> tags cause issues in us finding words - add some spacing around them
    new_text = text.replace(""<br>"", "" <br> "").replace(""<p>"", "" <p> "").replace(""</p>"", "" </p> "")
    lines = new_text.splitlines(keepends=True)
    final_lines = []
    code_block = False
    final_text = None
    # Check each line separately
    for line in lines:
        final_words = []
        if line[0:3] == ""```"":
            code_block = not code_block
        if line.find(""#"") == -1 or line[0:4] == ""    "" or code_block:
            # Just add the whole line
            final_lines.append(line)
            continue
        # Check each word separately
        words = line.split("" "")
        for word in words:
            if word.find('#') > -1:
                candidate = word.strip().strip(""([]),.!?:*_%/"")
                if candidate.find('<') > -1 or candidate.find('>') > -1:
                    # Strip html
                    candidate = bleach.clean(word, strip=True)
                # Now split with slashes
                candidates = candidate.split(""/"")
                to_replace = []
                for candidate in candidates:
                    if candidate.startswith(""#""):
                        candidate = candidate.strip(""#"")
                        if test_tag(candidate.lower()):
                            found_tags.add(candidate.lower())
                            to_replace.append(candidate)
                if replacer:
                    tag_word = word
                    try:
                        for counter, replacee in enumerate(to_replace, 1):
                            tag_word = tag_word.replace(""#%s"" % replacee, replacer(replacee))
                    except Exception:
                        pass
                    final_words.append(tag_word)
                else:
                    final_words.append(word)
            else:
                final_words.append(word)
        final_lines.append("" "".join(final_words))
    if replacer:
        final_text = """".join(final_lines)
    if final_text:
        final_text = final_text.replace("" <br> "", ""<br>"").replace("" <p> "", ""<p>"").replace("" </p> "", ""</p>"")
    return found_tags, final_text or text
"
"def process_text_links(text):
    """"""Process links in text, adding some attributes and linkifying textual links.""""""
    link_callbacks = [callbacks.nofollow, callbacks.target_blank]

    def link_attributes(attrs, new=False):
        """"""Run standard callbacks except for internal links.""""""
        href_key = (None, ""href"")
        if attrs.get(href_key).startswith(""/""):
            return attrs

        # Run the standard callbacks
        for callback in link_callbacks:
            attrs = callback(attrs, new)
        return attrs

    return bleach.linkify(
        text,
        callbacks=[link_attributes],
        parse_email=False,
        skip_tags=[""code""],
    )
"
"def fetch_content_type(url: str) -> Optional[str]:
    """"""
    Fetch the HEAD of the remote url to determine the content type.
    """"""
    try:
        response = requests.head(url, headers={'user-agent': USER_AGENT}, timeout=10)
    except RequestException as ex:
        logger.warning(""fetch_content_type - %s when fetching url %s"", ex, url)
    else:
        return response.headers.get('Content-Type')
"
"def test_tag(tag: str) -> bool:
    """"""Test a word whether it could be accepted as a tag.""""""
    if not tag:
        return False
    for char in ILLEGAL_TAG_CHARS:
        if char in tag:
            return False
    return True
"
"def xml_children_as_dict(node):
    """"""Turn the children of node <xml> into a dict, keyed by tag name.

    This is only a shallow conversation - child nodes are not recursively processed.
    """"""
    return dict((e.tag, e.text) for e in node)
"
"def check_sender_and_entity_handle_match(sender_handle, entity_handle):
    """"""Ensure that sender and entity handles match.

    Basically we've already verified the sender is who they say when receiving the payload. However, the sender might
    be trying to set another author in the payload itself, since Diaspora has the sender in both the payload headers
    AND the object. We must ensure they're the same.
    """"""
    if sender_handle != entity_handle:
        logger.warning(""sender_handle and entity_handle don't match, aborting! sender_handle: %s, entity_handle: %s"",
                       sender_handle, entity_handle)
        return False
    return True
"
"def get_nodeinfo_well_known_document(url, document_path=None):
    """"""Generate a NodeInfo .well-known document.

    See spec: http://nodeinfo.diaspora.software

    :arg url: The full base url with protocol, ie https://example.com
    :arg document_path: Custom NodeInfo document path if supplied (optional)
    :returns: dict
    """"""
    return {
        ""links"": [
            {
                ""rel"": ""http://nodeinfo.diaspora.software/ns/schema/1.0"",
                ""href"": ""{url}{path}"".format(
                    url=url, path=document_path or NODEINFO_DOCUMENT_PATH
                )
            }
        ]
    }
"
"def verify_relayable_signature(public_key, doc, signature):
    """"""
    Verify the signed XML elements to have confidence that the claimed
    author did actually generate this message.
    """"""
    sig_hash = _create_signature_hash(doc)
    cipher = PKCS1_v1_5.new(RSA.importKey(public_key))
    return cipher.verify(sig_hash, b64decode(signature))
"
"def parse_diaspora_webfinger(document: str) -> Dict:
    """"""
    Parse Diaspora webfinger which is either in JSON format (new) or XRD (old).

    https://diaspora.github.io/diaspora_federation/discovery/webfinger.html
    """"""
    webfinger = {
        ""hcard_url"": None,
    }
    # noinspection PyBroadException
    try:
        doc = json.loads(document)
        for link in doc[""links""]:
            if link[""rel""] == ""http://microformats.org/profile/hcard"":
                webfinger[""hcard_url""] = link[""href""]
                break
        else:
            logger.warning(""parse_diaspora_webfinger: found JSON webfinger but it has no hcard href"")
            raise ValueError
    except Exception:
        try:
            xrd = XRD.parse_xrd(document)
            webfinger[""hcard_url""] = xrd.find_link(rels=""http://microformats.org/profile/hcard"").href
        except (xml.parsers.expat.ExpatError, TypeError):
            logger.warning(""parse_diaspora_webfinger: found XML webfinger but it fails to parse"")
            pass
    return webfinger
"
"def try_retrieve_webfinger_document(handle: str) -> Optional[str]:
    """"""
    Try to retrieve an RFC7033 webfinger document. Does not raise if it fails.
    """"""
    try:
        host = handle.split(""@"")[1]
    except AttributeError:
        logger.warning(""retrieve_webfinger_document: invalid handle given: %s"", handle)
        return None
    document, code, exception = fetch_document(
        host=host, path=""/.well-known/webfinger?resource=acct:%s"" % quote(handle),
    )
    if exception:
        logger.debug(""retrieve_webfinger_document: failed to fetch webfinger document: %s, %s"", code, exception)
    return document
"
"def retrieve_and_parse_diaspora_webfinger(handle):
    """"""
    Retrieve a and parse a remote Diaspora webfinger document.

    :arg handle: Remote handle to retrieve
    :returns: dict
    """"""
    document = try_retrieve_webfinger_document(handle)
    if document:
        return parse_diaspora_webfinger(document)
    host = handle.split(""@"")[1]
    hostmeta = retrieve_diaspora_host_meta(host)
    if not hostmeta:
        return None
    url = hostmeta.find_link(rels=""lrdd"").template.replace(""{uri}"", quote(handle))
    document, code, exception = fetch_document(url)
    if exception:
        return None
    return parse_diaspora_webfinger(document)
"
"def retrieve_diaspora_host_meta(host):
    """"""
    Retrieve a remote Diaspora host-meta document.

    :arg host: Host to retrieve from
    :returns: ``XRD`` instance
    """"""
    document, code, exception = fetch_document(host=host, path=""/.well-known/host-meta"")
    if exception:
        return None
    xrd = XRD.parse_xrd(document)
    return xrd
"
"def send_document(url, data, timeout=10, method=""post"", *args, **kwargs):
    """"""Helper method to send a document via POST.

    Additional ``*args`` and ``**kwargs`` will be passed on to ``requests.post``.

    :arg url: Full url to send to, including protocol
    :arg data: Dictionary (will be form-encoded), bytes, or file-like object to send in the body
    :arg timeout: Seconds to wait for response (defaults to 10)
    :arg method: Method to use, defaults to post
    :returns: Tuple of status code (int or None) and error (exception class instance or None)
    """"""
    logger.debug(""send_document: url=%s, data=%s, timeout=%s, method=%s"", url, data, timeout, method)
    if not method:
        method = ""post""
    headers = CaseInsensitiveDict({
        'User-Agent': USER_AGENT,
    })
    if ""headers"" in kwargs:
        # Update from kwargs
        headers.update(kwargs.get(""headers""))
    kwargs.update({
        ""data"": data, ""timeout"": timeout, ""headers"": headers
    })
    request_func = getattr(requests, method)
    try:
        response = request_func(url, *args, **kwargs)
        logger.debug(""send_document: response status code %s"", response.status_code)
        return response.status_code, None
    # TODO support rate limit 429 code
    except RequestException as ex:
        logger.debug(""send_document: exception %s"", ex)
        return None, ex
"
"def dict_insert(dic, val, key, *keys):
    """"""insert a value of a nested key into a dictionary

    to insert value for a nested key, all ancestor keys should be given as
    method's arguments

    example:
      dict_insert({}, 'val', 'key1.key2'.split('.'))

    :param dic: a dictionary object to insert the nested key value into
    :param val: a value to insert to the given dictionary
    :param key: first key in a chain of key that will store the value
    :param keys: sub keys in the keys chain
    """"""
    if dic is None:
        return

    if not keys:
        if isinstance(dic.get(key, None), dict) and isinstance(val, dict):
            dict_merge(dic[key], val)
        else:
            dic[key] = val
        return

    dict_insert(dic.setdefault(key, {}), val, *keys)
"
"def list_of_file_names(settings_dirs, spec_option):
    """"""Create a new IniType complex type
    """"""
    return cli.ListOfFileNames(""ListOfFileNames"", settings_dirs, None,
                               spec_option)
"
"    @classmethod
    def ansible_config_manager(cls):
        """"""Gets the ansible config manager. """"""
        return cls._get_service(ServiceName.ANSIBLE_CONFIG_MANAGER)
"
"    @classmethod
    def workspace_manager(cls):
        """"""Gets the workspace manager. """"""
        return cls._get_service(ServiceName.WORKSPACE_MANAGER)
"
"    @classmethod
    def plugins_manager(cls):
        """"""Gets the plugin manager. """"""
        return cls._get_service(ServiceName.PLUGINS_MANAGER)
"
"    @classmethod
    def validate_from_content(cls, spec_content=None):
        """"""validates that spec (YAML) content has all required fields

        :param spec_content: content of spec file
        :raise IRValidatorException: when mandatory data
        is missing in spec file
        :return: Dictionary with data loaded from a spec (YAML) file
        """"""
        if spec_content is None:
            raise IRValidatorException(
                ""Plugin spec content is missing"")

        spec_dict = yaml.safe_load(spec_content)

        if not isinstance(spec_dict, dict):
            raise IRValidatorException(
                ""Spec file is empty or corrupted: {}"".format(spec_content))

        # check if new spec file structure
        try:
            if ""config"" in spec_dict:
                jsonschema.validate(spec_dict,
                                    cls.SCHEMA_WITH_CONFIG)
            else:
                jsonschema.validate(spec_dict,
                                    cls.SCHEMA_WITHOUT_CONFIG)

        except jsonschema.exceptions.ValidationError as error:
            raise IRValidatorException(
                ""{} in file:\n{}"".format(error.message, spec_content))

        subparsers_key = ""subparsers""
        if (""description"" not in spec_dict and ""description""
                not in list(spec_dict[subparsers_key].values())[0]):
            raise IRValidatorException(
                ""Required key 'description' is missing for supbarser '{}' in ""
                ""spec file: {}"".format(
                    list(spec_dict[subparsers_key].keys())[0], spec_content))

        return spec_dict
"
"    @classmethod
    def validate_from_file(cls, yaml_file=None):
        """"""Loads & validates that a YAML file has all required fields

        :param yaml_file: Path to YAML file
        :raise IRValidatorException: when mandatory data is missing in file
        :return: Dictionary with data loaded from a YAML file
        """"""
        if yaml_file is None:
            raise IRValidatorException(
                ""YAML file is missing"")

        if not os.path.isfile(yaml_file):
            raise IRValidatorException(
                ""The YAML file doesn't exist: {}"".format(yaml_file))

        with open(yaml_file) as fp:
            spec_dict = cls.validate_from_content(fp.read())

        return spec_dict
"
"    def _include_groups(self, parser_dict):
        """"""Resolves the include dict directive in the spec files. """"""
        for group in parser_dict.get('include_groups', []):
            # ensure we have that group
            grp_dict = next(
                (grp for grp in self.spec_dict.get('shared_groups', [])
                 if grp['title'] == group),
                None)
            if grp_dict is None:
                raise SpecParserException(
                    ""Unable to include group '{}' in '{}' parser. ""
                    ""Group was not found!"".format(
                        group,
                        parser_dict['name']))

            for option in grp_dict.get('options', {}).values():
                option['is_shared_group_option'] = True

            parser_groups_list = parser_dict.get('groups', [])
            parser_groups_list.append(deepcopy(grp_dict))
            parser_dict['groups'] = parser_groups_list
        parser_dict['groups']
"
"    def get_spec_defaults(self):
        """"""Resolve arguments' values from spec and other sources. """"""

        def spec_default_getter(option):
            """"""Getter function to retrieve the default value from spec.

            :param option: argument name
            """"""

            # first try to get environment variable with IR_ prefix
            default_value = SpecParser.get_env_option(option['name'])
            if default_value is not None:
                LOG.info(
                    ""[environ] Loading '{0}' default value""
                    "" '{1}' from the environment variable"".format(
                        option['name'], default_value))
            elif option.get('default', None) is not None:
                default_value = option['default']
            elif option.get('action', None) in ['store_true']:
                default_value = False
            return default_value

        return self._get_defaults(spec_default_getter)
"
"    def get_deprecated_args(self):
        """"""Returning dict with options which deprecate others. """"""

        result = collections.defaultdict(dict)
        for parser, option in self.spec_helper.iterate_option_specs():
            if option.get('deprecates') is not None:
                result[option.get('deprecates')] = option.get('name')

        return result
"
"    def validate_arg_deprecation(self, cli_args, answer_file_args):
        """"""Validates and prints the deprecated arguments.

        :param cli_args: the dict of arguments from cli
        :param answer_file_args:  the dict of arguments from files
        """"""

        for deprecated, deprecates in self.get_deprecated_args().items():
            for input_args in (answer_file_args.items(), cli_args.items()):
                for command, command_dict in input_args:
                    if deprecated in command_dict:
                        if deprecates in command_dict:
                            raise exceptions.IRDeprecationException(
                                ""[{}] Argument '{}' deprecates '{}',""
                                "" please use only the new one."".format(
                                    command, deprecated, deprecates))

                        if deprecated in answer_file_args[command]:
                            answer_file_args[command][deprecates] = \
                                answer_file_args[command][deprecated]

                        if deprecated in cli_args[command]:
                            cli_args[command][deprecates] = \
                                cli_args[command][deprecated]

                        LOG.warning(
                            ""[{}] Argument '{}' was deprecated,""
                            "" please use '{}'."".format(
                                command, deprecated, deprecates))
        return cli_args            
"
"    def get_parser_option_specs(self, command_name):
        """"""Gets all the options for the specified command

        :param command_name: the command name (main, virsh, ospd, etc...)
        :return: the list of all command options
        """"""
        options = []
        for parser in self.iterate_parsers():
            if parser['name'] == command_name:
                options = self._get_all_options_spec(parser)
                break
        return options
"
"    def get_option_spec(self, command_name, argument_name):
        """"""Gets the specification for the specified option name. """"""

        options = self.get_parser_option_specs(command_name)
        return next((opt for opt in options
                     if opt['name'] == argument_name), {})
"
"    def get_silent_args(self, args):
        """"""list of silenced argument

        :param args: The received arguments.
        :return: list, slienced argument names
        """"""
        silent_args_names = []
        for (parser_name, parser_dict, arg_name, arg_value,
             arg_spec) in self._iterate_received_arguments(args):
            if arg_spec and 'silent' in arg_spec and \
                    self.spec_helper.get_option_state(
                        parser_name,
                        arg_name,
                        args) == helper.OptionState['IS_SET']:
                silent_args_names.extend(arg_spec['silent'])

        return list(set(silent_args_names))
"
"    def validate_requires_args(self, args):
        """"""Check if all the required arguments have been provided. """"""

        silent_args = self.get_silent_args(args)

        def validate_parser(parser_name, expected_options, parser_args):
            """"""Helper method to resolve dict_merge. """"""

            result = collections.defaultdict(list)
            condition_req_args = self._get_conditionally_required_args(
                parser_name, expected_options, args)

            for option in expected_options:
                name = option['name']

                # check required options.
                if (option.get('required', False) and
                    name not in parser_args or
                    option['name'] in condition_req_args) and \
                        name not in silent_args:
                    result[parser_name].append(name)

            return result

        res = {}
        for command_data in self.spec_helper.iterate_parsers():
            cmd_name = command_data['name']
            if cmd_name in args:
                dict_utils.dict_merge(
                    res,
                    validate_parser(
                        cmd_name,
                        self.spec_helper.get_parser_option_specs(cmd_name),
                        args[cmd_name]))

        missing_args = dict((cmd_name, args)
                            for cmd_name, args in res.items() if len(args) > 0)
        return missing_args
"
"    def _get_conditionally_required_args(self, command_name, options_spec,
                                         args):
        """"""List arguments with ``required_when`` condition matched.

        :param command_name: the command name.
        :param options_spec:  the list of command spec options.
        :param args: the received input arguments
        :return: list, list of argument names with matched ``required_when``
            condition
        """"""
        opts_names = [option_spec['name'] for option_spec in options_spec]
        missing_args = []
        for option_spec in options_spec:
            option_results = []
            if option_spec and 'required_when' in option_spec:
                req_when_args = [option_spec['required_when']] \
                    if not type(option_spec['required_when']) is list \
                    else option_spec['required_when']

                # validate conditions
                for req_when_arg in req_when_args:
                    splited_args_list = req_when_arg.split()
                    for idx, req_arg in enumerate(splited_args_list):
                        if req_arg in opts_names:
                            splited_args_list[idx] = \
                                args.get(command_name, {}).get(req_arg.strip())
                        if splited_args_list[idx] is None:
                            option_results.append(False)
                            break
                        splited_args_list[idx] = str(splited_args_list[idx])
                        if (splited_args_list[idx] not in ['and', 'or'] and
                            not any(
                                (c in '<>=') for c in splited_args_list[idx])):
                            splited_args_list[idx] = ""'{0}'"".format(
                                yaml.safe_load(splited_args_list[idx]))
                    else:
                        option_results.append(
                            eval(' '.join(splited_args_list)))
                if all(option_results) and \
                        self.spec_helper.get_option_state(
                            command_name,
                            option_spec['name'],
                            args) == helper.OptionState['NOT_SET']:
                    missing_args.append(option_spec['name'])
        return missing_args
"
"    def validate_length_args(self, args):
        """"""Check if value of arguments is not longer than length specified.

        :param args: The received arguments.
        """"""
        invalid_options = []
        for parser_name, parser_dict in args.items():
            for spec_option in \
                    self.spec_helper.get_parser_option_specs(parser_name):
                if 'length' not in spec_option:
                    # skip options that does not contain length
                    continue
                option_name = spec_option['name']
                if option_name in parser_dict:
                    # resolve length
                    length = spec_option['length']
                    option_value = parser_dict[option_name]
                    if len(option_value) > int(length):
                        # found invalid option, append to list of invalid opts
                        invalid_options.append((
                            option_name,
                            option_value,
                            length
                        ))
        return invalid_options
"
"    def validate_choices_args(self, args):
        """"""Check if value of choice arguments is one of the available choices.

        :param args: The received arguments.
        """"""
        invalid_options = []
        for parser_name, parser_dict in args.items():
            for spec_option in \
                    self.spec_helper.get_parser_option_specs(parser_name):
                if 'choices' not in spec_option:
                    # skip options that does not contain choices
                    continue
                option_name = spec_option['name']
                if option_name in parser_dict:
                    # resolve choices
                    choices = spec_option['choices']
                    option_value = parser_dict[option_name]
                    if option_value not in choices:
                        # found invalid option, append to list of invalid opts
                        invalid_options.append((
                            option_name,
                            option_value,
                            choices
                        ))
        return invalid_options
"
"    def validate_min_max_args(self, args):
        """"""Check if value of arguments is between minimum and maximum values.

        :param args: The received arguments.
        """"""
        invalid_options = []
        for parser_name, parser_dict in args.items():
            for spec_option in \
                    self.spec_helper.get_parser_option_specs(parser_name):
                if all([key not in spec_option
                        for key in ('maximum', 'minimum')]):
                    # skip options that does not contain minimum or maximum
                    continue
                option_name = spec_option['name']

                if option_name in parser_dict:
                    option_value = parser_dict[option_name]
                    min_value = spec_option.get('minimum')
                    max_value = spec_option.get('maximum')
                    # handle empty values in spec files which load as None
                    min_value = '' if 'minimum' in spec_option \
                                      and min_value is None else min_value
                    max_value = '' if 'maximum' in spec_option \
                                      and max_value is None else max_value

                    values = {
                        ""value"": option_value,
                        ""maximum"": max_value,
                        ""minimum"": min_value
                    }

                    # make sure that values are numbers
                    is_all_values_numbers = True
                    for name, num in values.items():
                        if num is not None \
                                and (isinstance(num, bool) or
                                     not isinstance(num, (int, float))):
                            invalid_options.append((
                                option_name,
                                name,
                                ""number"",
                                type(num).__name__
                            ))
                            is_all_values_numbers = False

                    if not is_all_values_numbers:
                        # don't continue to min max checks since some of the
                        # values are not numbers
                        continue

                    # check bigger than minimum
                    if min_value is not None and option_value < min_value:
                        invalid_options.append((
                            option_name,
                            ""minimum"",
                            min_value,
                            option_value
                        ))
                    # check smaller than maximum
                    if max_value is not None and option_value > max_value:
                        invalid_options.append((
                            option_name,
                            ""maximum"",
                            max_value,
                            option_value
                        ))

        return invalid_options
"
"    def create_complex_argumet_type(self, subcommand, type_name, option_name,
                                    spec_option):
        """"""Build the complex argument type

        :param subcommand: the command name
        :param type_name: the complex type name
        :param option_name: the option name
        :param spec_option: option's specifications
        :return: the complex type instance
        """"""
        complex_action = COMPLEX_TYPES.get(
            type_name, None)
        if complex_action is None:
            raise exceptions.SpecParserException(
                ""Unknown complex type: {}"".format(type_name))
        return complex_action(
            option_name,
            (self.vars, self.defaults, self.plugin_path),
            subcommand,
            spec_option)
"
"    def get_nested_custom_and_control_args(self, args):
        """"""Split input arguments to control nested and custom.

        Controls arguments: control the IR behavior. These arguments
            will not be put into the spec yml file
        Nested arguments: are used by the Ansible playbooks and will be put
            into the spec yml file.
        Custom arguments: Custom ansible variables to be used instead of the
            normal nested usage.

        :param args: the collected list of args.
        :return: (dict, dict): flat dicts (control_args, nested_args)
        """"""
        # returns flat dicts
        nested = {}
        control_args = {}
        custom_args = {}
        for (parser_name, parser_dict, arg_name, arg_value,
             arg_spec) in self._iterate_received_arguments(args):
            if all([arg_spec, arg_spec.get('type', None),
                    arg_spec.get('type', None) in
                    [ctype_name for ctype_name, klass in
                     COMPLEX_TYPES.items() if klass.is_nested]
                    ]) or ('is_shared_group_option' not in arg_spec):
                if arg_name in nested:
                    LOG.warning(
                        ""Duplicated nested argument found:'{}'. ""
                        ""Using old value: '{}'"".format(
                            arg_name, nested[arg_name]))
                elif arg_name in custom_args:
                    LOG.warning(
                        ""Duplicated custom argument found:'{}'. ""
                        ""Using old value: '{}'"".format(
                            arg_name, custom_args[arg_name]))
                else:
                    if ""ansible_variable"" in arg_spec:
                        custom_args[arg_spec[""ansible_variable""]] = arg_value
                    else:
                        nested[arg_name] = arg_value
            else:
                if arg_name in control_args:
                    LOG.warning(
                        ""Duplicated control argument found: '{}'. Using ""
                        ""old value: '{}'"".format(
                            arg_name, control_args[arg_name]))
                else:
                    control_args[arg_name] = arg_value

        return nested, control_args, custom_args
"
"    @staticmethod
    def merge_extra_vars(vars_dict, extra_vars=None):
        """"""Extend ``vars_dict`` with ``extra-vars``

        :param vars_dict: Dictionary to merge extra-vars into
        :param extra_vars: List of extra-vars
        """"""
        for extra_var in extra_vars or []:
            if extra_var.startswith('@'):
                with open(extra_var[1:]) as f_obj:
                    loaded_yml = yaml.safe_load(f_obj)

                dict_utils.dict_merge(
                    vars_dict,
                    loaded_yml,
                    conflict_resolver=dict_utils.ConflictResolver.
                    unique_append_list_resolver)

            else:
                if '=' not in extra_var:
                    raise exceptions.IRExtraVarsException(extra_var)
                key, value = extra_var.split(""="", 1)
                if value.startswith('@'):
                    with open(value[1:]) as f_obj:
                        loaded_yml = yaml.safe_load(f_obj)

                    tmp_dict = {}
                    dict_utils.dict_insert(tmp_dict, loaded_yml, *key.split("".""))

                    dict_utils.dict_merge(
                        vars_dict,
                        tmp_dict,
                        conflict_resolver=dict_utils.ConflictResolver.
                        unique_append_list_resolver)

                else:
                    dict_utils.dict_insert(vars_dict, value, *key.split("".""))
        return vars_dict
"
"def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,
                     extra_vars=None, ansible_args=None):
    """"""Wraps the 'ansible-playbook' CLI.

     :param ir_workspace: An Infrared Workspace object represents the active
     workspace
     :param ir_plugin: An InfraredPlugin object of the current plugin
     :param playbook_path: the playbook to invoke
     :param verbose: Ansible verbosity level
     :param extra_vars: dict. Passed to Ansible as extra-vars
     :param ansible_args: dict of ansible-playbook arguments to plumb down
         directly to Ansible.
    """"""
    ansible_args = ansible_args or []
    LOG.debug(""Additional ansible args: {}"".format(ansible_args))

    # hack for verbosity
    from ansible.utils.display import Display
    display = Display(verbosity=verbose)
    import __main__ as main
    setattr(main, ""display"", display)

    # TODO(yfried): Use proper ansible API instead of emulating CLI
    cli_args = ['execute',
                playbook_path,
                '--inventory', ir_workspace.inventory]

    # infrared should not change ansible verbosity unless user specifies that
    if verbose:
        cli_args.append('-' + 'v' * int(verbose))

    cli_args.extend(ansible_args)

    results = _run_playbook(cli_args, vars_dict=extra_vars or {},
                            ir_workspace=ir_workspace, ir_plugin=ir_plugin)

    if results:
        LOG.error('Playbook ""%s"" failed!' % playbook_path)
    return results
"
"def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):
    """"""Runs ansible cli with vars dict

    :param vars_dict: dict, Will be passed as Ansible extra-vars
    :param cli_args: the list  of command line arguments
    :param ir_workspace: An Infrared Workspace object represents the active
     workspace
    :param ir_plugin: An InfraredPlugin object of the current plugin
    :return: ansible results
    """"""

    # TODO(yfried): use ansible vars object instead of tmpfile
    # NOTE(oanufrii): !!!this import should be exactly here!!!
    #                 Ansible uses 'display' singleton from '__main__' and
    #                 gets it on module level. While we monkeypatching our
    #                 '__main__' in 'ansible_playbook' function import of
    #                 PlaybookCLI shoul be after that, to get patched
    #                 '__main__'. Otherwise ansible gets unpatched '__main__'
    #                 and creates new 'display' object with default (0)
    #                 verbosity.
    # NOTE(afazekas): GlobalCLIArgs gets value only once per invocation, but
    # since it has singleton decorator, so it would remember to old arguments in different tests
    # removing the singleton decorator
    try:
        from ansible.utils import context_objects
        context_objects.GlobalCLIArgs = context_objects.CLIArgs
    except ImportError:
        # older version
        pass

    from ansible.cli.playbook import PlaybookCLI
    from ansible.errors import AnsibleOptionsError
    from ansible.errors import AnsibleParserError

    with tempfile.NamedTemporaryFile(
            mode='w+', prefix=""ir-settings-"", delete=True) as tmp:
        tmp.write(yaml.safe_dump(vars_dict, default_flow_style=False))
        # make sure created file is readable.
        tmp.flush()
        cli_args.extend(['--extra-vars', ""@"" + tmp.name])

        if not bool(strtobool(os.environ.get('IR_NO_EXTRAS', 'no'))):
            ir_extras = {
                'infrared': {
                    'python': {
                        'executable': sys.executable,
                        'version': {
                            'full': sys.version.split()[0],
                            'major': sys.version_info.major,
                            'minor': sys.version_info.minor,
                            'micro': sys.version_info.micro,
                        }
                    }
                }
            }
            cli_args.extend(['--extra-vars', str(ir_extras)])

        cli = PlaybookCLI(cli_args)
        LOG.debug('Starting ansible cli with args: {}'.format(cli_args[1:]))
        try:
            cli.parse()

            stdout = not bool(
                strtobool(os.environ.get('IR_ANSIBLE_NO_STDOUT', 'no')))
            stderr = not bool(
                strtobool(os.environ.get('IR_ANSIBLE_NO_STDERR', 'no')))

            ansible_outputs_dir = \
                os.path.join(ir_workspace.path, 'ansible_outputs')
            ansible_vars_dir = \
                os.path.join(ir_workspace.path, 'ansible_vars')

            timestamp = datetime.utcnow().strftime(""%Y-%m-%d_%H-%M-%S.%f"")
            filename_template = \
                ""ir_{timestamp}_{plugin_name}{postfix}.{file_ext}""

            for _dir in (ansible_outputs_dir, ansible_vars_dir):
                try:
                    os.makedirs(_dir)
                except OSError as e:
                    if e.errno != errno.EEXIST:
                        raise

            if bool(strtobool(os.environ.get('IR_GEN_VARS_JSON', 'no'))):
                filename = filename_template.format(
                    timestamp=timestamp,
                    plugin_name=ir_plugin.name,
                    postfix='',
                    file_ext='json'
                )
                vars_file = os.path.join(ansible_vars_dir, filename)
                with open(vars_file, 'w') as fp:
                    json.dump(vars_dict, fp, indent=4, sort_keys=True)

            with IRSTDFDManager(stdout=stdout, stderr=stderr) as fd_manager:

                if bool(strtobool(os.environ.get(
                        'IR_ANSIBLE_LOG_OUTPUT', 'no'))):
                    filename = filename_template.format(
                        timestamp=timestamp,
                        plugin_name=ir_plugin.name,
                        postfix='',
                        file_ext='log'
                    )
                    log_file = os.path.join(ansible_outputs_dir, filename)
                    fd_manager.add(open(log_file, 'w'))

                if bool(strtobool(os.environ.get(
                        'IR_ANSIBLE_LOG_OUTPUT_NO_ANSI', 'no'))):
                    filename = filename_template.format(
                        timestamp=timestamp,
                        plugin_name=ir_plugin.name,
                        postfix='_no_ansi',
                        file_ext='log'
                    )
                    log_file = os.path.join(ansible_outputs_dir, filename)
                    fd_manager.add(NoAnsiFile(open(log_file, 'w')))

                # Return the result:
                # 0: Success
                # 1: ""Error""
                # 2: Host failed
                # 3: Unreachable
                # 4: Parser Error
                # 5: Options error

                return cli.run()

        except (AnsibleParserError, AnsibleOptionsError) as error:
            LOG.error('{}: {}'.format(type(error), error))
            raise error
"
"    def _convert_non_cli_args(self, parser_name, values_dict):
        """"""Casts arguments to correct types by modifying values_dict param.

        By default all the values are strings.

        :param parser_name: The command name, e.g. main, virsh, ospd, etc
        :param values_dict: The dict of with arguments
       """"""
        for opt_name, opt_value in values_dict.items():
            file_option_spec = self.spec_helper.get_option_spec(
                parser_name, opt_name)
            if file_option_spec.get('type', None) in ['int', ] or \
                    file_option_spec.get('action', None) in ['count', ]:
                values_dict[opt_name] = int(opt_value)
        return values_dict
"
"def get_plugin_spec_flatten_dict(plugin_dir):
    """"""Creates a flat dict from the plugin spec

    :param plugin_dir: A path to the plugin's dir
    :return: A flatten dictionary contains the plugin's properties
    """"""
    with open(os.path.join(plugin_dir, PLUGIN_SPEC)) as fp:
        spec_yaml = yaml.safe_load(fp)

    plugin_name = list(spec_yaml['subparsers'].keys())[0]

    plugin_description = spec_yaml['description'] \
        if ""description"" in spec_yaml \
        else spec_yaml['subparsers'][plugin_name]['description']

    plugin_type = spec_yaml[""config""][""plugin_type""] \
        if ""config"" in spec_yaml \
        else spec_yaml[""plugin_type""]

    plugin_spec_dict = dict(
        name=plugin_name,
        dir=plugin_dir,
        description=plugin_description,
        type=plugin_type
    )

    return plugin_spec_dict
"
"    def inject_config(self):
        """"""Set the environment variable for config path, if it is undefined.""""""
        if os.environ.get('ANSIBLE_CONFIG', '') == '':
            os.environ['ANSIBLE_CONFIG'] = self.ansible_config_path
        return os.environ['ANSIBLE_CONFIG']"
"    def extend_cli(self, root_subparsers):
        workspace_plugin = root_subparsers.add_parser(
            self.name,
            help=self.kwargs[""description""],
            **self.kwargs)
        workspace_subparsers = workspace_plugin.add_subparsers(dest=""command0"")

        # create
        create_parser = workspace_subparsers.add_parser(
            'create', help='Creates a new workspace')
        create_parser.add_argument(""name"", help=""Workspace name"")

        # checkout
        checkout_parser = workspace_subparsers.add_parser(
            'checkout',
            help='Switches workspace to the specified workspace')
        checkout_parser.add_argument(
            ""name"",
            help=""Workspace name"").completer = completers.workspace_list
        checkout_parser.add_argument(
            ""-c"", ""--create"", action='store_true', dest=""checkout_create"",
            help=""Creates a workspace if not exists and ""
                 ""switches to it"")

        # inventory
        inventory_parser = workspace_subparsers.add_parser(
            'inventory',
            help=""prints workspace's inventory file"")
        inventory_parser.add_argument(
            ""name"", help=""Workspace name"",
            nargs=""?"").completer = completers.workspace_list

        # list
        wrkspc_list_parser = workspace_subparsers.add_parser(
            'list', help='Lists all the workspaces')
        wrkspc_list_parser.add_argument(
            ""--active"", action='store_true', dest='print_active',
            help=""Prints the active workspace only"")

        # delete
        delete_parser = workspace_subparsers.add_parser(
            'delete', help='Deletes workspaces')
        delete_parser.add_argument(
            'name', nargs='+',
            help=""Workspace names"").completer = completers.workspace_list

        # cleanup
        cleanup_parser = workspace_subparsers.add_parser(
            'cleanup', help='Removes all the files from workspace')
        cleanup_parser.add_argument(
            ""name"",
            help=""Workspace name"").completer = completers.workspace_list

        # import settings
        importer_parser = workspace_subparsers.add_parser(
            'import', help='Import deployment configs.')
        importer_parser.add_argument(""filename"", help=""Archive file name or URL."")
        importer_parser.add_argument(
            ""-n"", ""--name"", dest=""workspacename"",
            help=""Workspace name to import with. ""
            ""If not specified - file name will be used."")

        # export settings
        exporter_parser = workspace_subparsers.add_parser(
            'export', help='Export deployment configurations.')
        exporter_parser.add_argument(
            ""-n"", ""--name"", dest=""workspacename"",
            help=""Workspace name. If not sepecified - active ""
            ""workspace will be used."").completer = completers.workspace_list
        exporter_parser.add_argument(""-f"", ""--filename"", dest=""filename"",
                                     help=""Archive file name."")

        exporter_parser.add_argument(""-K"", ""--copy-keys"", dest=""copykeys"",
                                     action=""store_true"",
                                     help=""Silently copy ssh keys ""
                                     ""to workspace."")
        # node list
        nodelist_parser = workspace_subparsers.add_parser(
            'node-list',
            help='List nodes, managed by workspace')
        nodelist_parser.add_argument(
            ""-n"", ""--name"",
            help=""Workspace name"").completer = completers.workspace_list
        nodelist_parser.add_argument(
            ""-g"", ""--group"",
            help=""List nodes in specific group""
        ).completer = completers.group_list
        nodelist_parser.add_argument(
            ""-f"", ""--format"", choices=['fancy', 'json'], default='fancy',
            help=""Output format"")

        # group list
        grouplist_parser = workspace_subparsers.add_parser(
            'group-list',
            help='List groups, managed by workspace')
        grouplist_parser.add_argument(
            ""-n"", ""--name"",
            help=""Workspace name"").completer = completers.workspace_list
"
"def strip_root(path, root):
    """"""Remove root from path, throw exception on failure.""""""
    root = root.rstrip(os.sep)  # ditch any trailing path separator
    if os.path.commonprefix((path, root)) == root:
        return os.path.relpath(path, start=root)
    raise Exception(""Path %s is not in root %s"" % (path, root))
"
